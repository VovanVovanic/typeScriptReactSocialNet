{"version":3,"sources":["assets/images/ava.gif","components/Navbar/friends/friends.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Preloader/preloader.module.css","components/Preloader/151.gif","components/Login/form.module.css","api/api.ts","redux/reducers/auth.ts","redux/reducers/profile.ts","redux/reducers/dialogs.ts","redux/reducers/sidebar.ts","redux/reducers/users.ts","redux/reduxStore.ts","components/Navbar/friends/index.js","components/Navbar/friends/Friends.jsx","components/Navbar/Navbar.tsx","components/Navbar/NavbarContainer.tsx","components/Profile/MyPosts/MyPostsForm.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","redux/actions/myPosts.ts","components/Profile/MyPosts/MyPostsContainer.ts","components/Profile/ProfileStatus.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","redux/actions/auth.ts","components/Header/Header.tsx","components/Header/HeaderRequest.tsx","components/Header/HeaderContainer.ts","components/Login/loginForm.tsx","components/Login/login.tsx","App.tsx","index.tsx","utils/validators.ts","components/common/formControls.tsx","components/Preloader/preloader.tsx","components/Navbar/Navbar.module.css","redux/actions/types.ts","components/common/formControls.module.css","components/Header/Header.module.css","components/hoc/authRedirect.tsx"],"names":["module","exports","instance","axios","create","baseURL","withCredentials","headers","getItems","pageNumber","get","then","response","data","followThisUser","id","post","noFollowThisUser","delete","getThisUser","authMe","getThisStatus","updateThisStatus","status","put","loginMe","email","password","rememberMe","logoffMe","initialState","initialized","login","imageSrc","isFetching","isLogged","postList","like","profile","users","label","messages","friendList","pageCount","initialPage","total","initialPagination","isFetchingFollow","followInProgress","reducers","combineReducers","state","action","type","ADD_POST","newPost","value","SET__PROFILE","SET_STATUS","dialogs","ADD_MESSAGE","sidebar","FOLLOW","stateCopy","map","el","followed","NOFOLLOW","stateNewCopy","SET__PAGE","page","SET__TOTAL","SET__PAGINATION","pagination","SET__USERS","TOGGLE__PRELOADER","TOGGLE_FOLLOW_STATUS","userId","filter","auth","SET_USER_DATA","INITIALIZE_DATE","form","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","Friends","myFriends","i","key","className","classes","Navbar","links","to","exact","item","activeClassName","active","nav","NavbarContainer","connect","max","maxLength","MyPostsForm","reduxForm","handleSubmit","onSubmit","Field","component","TextArea","name","placeholder","validate","required","Post","message","s","src","MyPosts","list","onPostAddedAction","Posts","values","PostFormText","postsActions","MyPostsContainer","ProfileStatus","setNewStatus","useState","editMode","setEditMode","inputValue","setInputValue","useEffect","onDoubleClick","autoFocus","onBlur","onChange","e","currentTarget","Profile","useSelector","isProfile","photos","large","ava","alt","fullName","keys","Object","contacts","socials","content","lookingForAJob","lookingForAJobDescription","ProfileContainer","setProfileData","dispatch","getStatus","resultCode","withRouter","withAuthRedirect","match","history","params","String","push","setUserData","getUserData","console","log","catch","Header","logoff","userAvatar","onClick","loginContent","header","loginContentWrapper","HeaderRequest","headerProps","this","props","Component","HeaderContainer","LoginForm","error","Input","formError","errorMessage","length","stopSubmit","_error","formData","UsersContainer","React","lazy","Dialogs","News","Music","Settings","App","initializeUserData","fallback","path","render","Login","AppContainer","promise","Promise","all","renderTree","ReactDOM","document","getElementById","getState","subscribe","undefined","FormControls","meta","restProps","isError","touched","textArreaWrapper","children","input","Preloader","gif","mapStateToProps","isAuth","WrappedComponent","RedirectComponent"],"mappings":"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","file":"static/js/main.425e0be8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ava.e36197b5.gif\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Friends\":\"friends_Friends__e_14x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Posts\":\"MyPosts_Posts__uJhQY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2wdbA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Preloader\":\"preloader_Preloader__3coKa\"};","module.exports = __webpack_public_path__ + \"static/media/151.027520c2.gif\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formError\":\"form_formError__P2Q79\"};","\r\nimport axios from 'axios'\r\nimport { dataType } from '../redux/reducers/auth'\r\nimport { ProfileType } from '../redux/reducers/profile'\r\nimport { UsersType } from '../redux/reducers/users'\r\n\r\nlet instance = axios.create({\r\nbaseURL:`https://social-network.samuraijs.com/api/1.0/`,\r\n  withCredentials: true,\r\n  headers: {\r\n    \"API-KEY\": \"8a3288e4-c626-49c0-8a6e-b791c78489b1\",\r\n  },\r\n})\r\n\r\ntype CommonResponseType<D> = {\r\n  resultCode: number\r\n  messages: Array<string>\r\n  data: D\r\n}\r\n\r\ntype GetItemsResponseType = {\r\n  items: UsersType\r\n  totalCount: number\r\n  error: null | string\r\n}\r\n\r\n\r\n\r\nexport const getItems = (pageNumber: number) => {\r\n  return instance.get<GetItemsResponseType>(`users?page=${pageNumber}&count=5`).then(response => response.data)\r\n}\r\n  \r\nexport const followThisUser = (id: number) => {\r\n  return instance.post<CommonResponseType<{}>>(`follow/${id}`).then(response => response.data)\r\n}\r\nexport const noFollowThisUser = (id: number) => {\r\n  return instance.delete<CommonResponseType<{}>>(`follow/${id}`).then(response => response.data)\r\n}\r\nexport const getThisUser = (id: string) => {\r\n  return instance.get<ProfileType>(`profile/${id}`).then(response => response.data)\r\n}\r\nexport const authMe = () => {\r\n  return instance.get<CommonResponseType<dataType>>(`auth/me`).then(response => response.data)\r\n}\r\nexport const getThisStatus = (id: string) => {\r\n  return instance.get(`profile/status/${id}`).then(response => response.data)\r\n}\r\nexport const updateThisStatus = (status: string) => {\r\n  return instance.put<CommonResponseType<Object>>(`profile/status/`,{status}).then(response => response.data)\r\n}\r\nexport const loginMe = (email: string, password: string, rememberMe: boolean = false) => {\r\n  return instance.post<CommonResponseType<{userId:number}>>(`/auth/login/`,{email, password, rememberMe}).then(response => response.data)\r\n}\r\nexport const logoffMe = () => {\r\n  return instance.delete<CommonResponseType<{}>>(`/auth/login/`).then(response => response.data)\r\n}","\r\nimport { InitializeDataType, setUserDataType } from \"../actions/auth\";\r\nimport {  INITIALIZE_DATE, SET_USER_DATA } from \"../actions/types\";\r\n\r\n\r\nexport type dataType = {\r\n  id: null | number\r\n  email: null | string\r\n  login: null | string\r\n  \r\n}\r\nexport type authStateType = dataType & {\r\n  initialized: boolean\r\n  isFetching: boolean\r\n  isLogged: boolean\r\n  imageSrc:null | string\r\n}\r\n\r\nconst initialState: authStateType = {\r\n  initialized: false,\r\n  id: null,\r\n  email: null,\r\n  login: null,\r\n  imageSrc:null,\r\n  isFetching: true,\r\n  isLogged: false\r\n}\r\n\r\nexport const authReducer = (state: authStateType = initialState, action: setUserDataType | InitializeDataType)\r\n  : authStateType => {\r\n  switch (action.type) {\r\n      case SET_USER_DATA: return { ...state, isLogged: action.isLogged, isFetching: false, ...action.data }\r\n      case INITIALIZE_DATE: return{...state, initialized:true}\r\n        default:\r\n        { return state } \r\n        \r\n    }\r\n}\r\n","import { postsActionType} from \"../actions/myPosts\";\r\nimport { ADD_POST, SET_STATUS, SET__PROFILE } from \"../actions/types\";\r\nimport { ContactsType, PhotosType } from \"./users\";\r\n\r\nexport type postType = { post: string, like: number }\r\nexport type postListType = Array<postType>\r\nexport type newPostTextType = string\r\n\r\n\r\nexport type ProfileType = {\r\n  userId: number\r\n  contacts: ContactsType\r\n  fullName: string\r\n  lookingForAJob: false\r\n  lookingForAJobDescription: null | string\r\n  photos: PhotosType\r\n}\r\nexport type profileStateType = typeof initialState\r\n\r\nconst initialState= {\r\n    postList: [\r\n        {post: \"My message\", like: 1},\r\n        { post: \"My second message\", like: 6 }],\r\n    profile: null as ProfileType | null,\r\n\r\n    status: ''\r\n}\r\n\r\nexport const profileReducer = (state: profileStateType = initialState, action: postsActionType): profileStateType => {\r\n    switch (action.type) {\r\n     \r\n\r\n        case ADD_POST: {\r\n            let newPost = { post: action.value, like: 3 }\r\n            return {\r\n                ...state,\r\n                postList: [...state.postList, newPost],\r\n            }\r\n        }\r\n        case SET__PROFILE:\r\n            return { ...state, profile: action.profile }\r\n\r\n        case SET_STATUS:\r\n            return { ...state, status: action.status }\r\n        default:\r\n            { return state }\r\n    }\r\n}","\r\nimport { dialogsType } from \"../actions/messages\";\r\nimport { ADD_MESSAGE } from \"../actions/types\";\r\n\r\nexport type userType = { label: string }\r\nexport type usersType = typeof initialState.users\r\nexport type messageType = { label: string, id: number }\r\nexport type messagesType = Array<messageType>\r\n\r\nexport type dialogsStateType = typeof initialState\r\n\r\nconst initialState = {\r\n        users: [\r\n            {label: \"Anna\"},\r\n            {label: \"Natalya\"},  \r\n            {label: \"Vladimir\"},\r\n            {label: \"Mike\"},\r\n            {label: \"John\"},\r\n            {label: \"Piter\"},\r\n            {label: \"Alex\"},\r\n            {label: \"Frank\"}\r\n        ],  \r\n\r\n        messages: [\r\n            { label: \"I am fine\", id: 1 },\r\n            { label: \"Hello\", id: 2 },\r\n            { label: \"What is you name?\", id: 3},\r\n            { label: \"Look at this!\", id: 4},\r\n            { label: \"Yo bro!\", id: 5}\r\n        ]\r\n}\r\n    \r\nexport const dialogReducer = (state:dialogsStateType = initialState, action:dialogsType):dialogsStateType => {\r\n  switch (action.type) {\r\n    case ADD_MESSAGE: {\r\n      let newPost = { label: action.value, id: 34 };\r\n      return {\r\n        ...state,  \r\n        messages:[...state.messages, newPost]\r\n      }\r\n      \r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};","\r\nexport type friendType = {\r\n  label:string\r\n}\r\nexport type friendsType = Array<friendType>\r\n\r\nexport type friendsStateType = typeof initialState\r\nconst initialState = {\r\n    friendList: [\r\n        { label: 'Andrew' },\r\n        { label: 'Sasha' },\r\n        {label: 'Sveta'}\r\n    ]\r\n}\r\nexport const sidebarReducer = (state:friendsStateType = initialState, action:any):friendsStateType=> {\r\n    return state\r\n}","import {\r\n  FOLLOW,\r\n  NOFOLLOW,\r\n  SET__PAGE,\r\n  SET__USERS,\r\n  SET__TOTAL,\r\n  SET__PAGINATION,\r\n  TOGGLE__PRELOADER,\r\n  TOGGLE_FOLLOW_STATUS,\r\n} from \"../actions/types\";\r\nimport { usersActionType } from \"../actions/users\";\r\n\r\n\r\nexport type PhotosType = {\r\n  small: null | string\r\n  large: null | string\r\n}\r\nexport type UserType = {\r\n  id: number\r\n  name: string\r\n  photos: PhotosType\r\n  status: null | string\r\n  followed: boolean\r\n}\r\nexport type UsersType = Array<UserType>\r\n\r\nexport type ContactsType = {\r\n  facebook: null | string\r\n  website: null | string\r\n  vk: null | string\r\n  twitter: null | string\r\n  instagram: null | string\r\n  github: null | string\r\n  youtube: null | string\r\n  mainLink: null | string\r\n}\r\n\r\nexport type UsersStateType = typeof initialState\r\nconst initialState = {\r\n  users: [] as UsersType,\r\n  pageCount: 5,\r\n  initialPage: 1,\r\n  total: 0,\r\n  initialPagination: 0,\r\n  isFetching: false,\r\n  isFetchingFollow: false,\r\n  followInProgress: [] as Array<number>\r\n};\r\n\r\nexport const usersReducer = (state:UsersStateType = initialState, action:usersActionType):UsersStateType => {\r\n  switch (action.type) {\r\n    case FOLLOW:\r\n      let stateCopy = {\r\n        ...state,\r\n        users: state.users.map((el) => {\r\n          if (el.id === action.id) {\r\n            el.followed = true;\r\n            return el;\r\n          }\r\n          return el;\r\n        }),\r\n      };\r\n      return stateCopy;\r\n    case NOFOLLOW:\r\n      let stateNewCopy = {\r\n        ...state,\r\n        users: state.users.map((el) => {\r\n          if (el.id === action.id) {\r\n            el.followed = false;\r\n            return el;\r\n          }\r\n          return el;\r\n        }),\r\n      };\r\n      return stateNewCopy;\r\n    case SET__PAGE:\r\n      return { ...state, initialPage: action.page };\r\n    case SET__TOTAL:\r\n      return { ...state, total: action.total };\r\n    case SET__PAGINATION:\r\n      return { ...state, initialPagination: action.pagination };\r\n    case SET__USERS:\r\n      return { ...state, users: [...action.users] };\r\n    case TOGGLE__PRELOADER:\r\n      return {...state, isFetching: action.isFetching}\r\n    case TOGGLE_FOLLOW_STATUS: \r\n      return {\r\n        ...state,\r\n        followInProgress: action.isFetchingFollow\r\n          ? [...state.followInProgress, action.userId]\r\n          : state.followInProgress.filter((el)=> el !== action.userId)\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n\r\n","import { authReducer } from './reducers/auth';\r\nimport {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {profileReducer} from \"./reducers/profile\";\r\nimport {dialogReducer} from \"./reducers/dialogs\";\r\nimport { sidebarReducer } from \"./reducers/sidebar\";\r\nimport { usersReducer } from \"./reducers/users\";\r\nimport thunk from 'redux-thunk';\r\nimport{ reducer as formReducer} from 'redux-form'\r\n\r\n\r\nconst reducers = combineReducers({\r\n  profile: profileReducer,\r\n  dialogs: dialogReducer,\r\n  sidebar: sidebarReducer,\r\n  users: usersReducer,\r\n  auth: authReducer,\r\n  form: formReducer\r\n});\r\n\r\n\r\ntype rootReducerType = typeof reducers\r\nexport type RootStateType = ReturnType<rootReducerType>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunk)))\r\nexport default store","import Friends from './Friends'\r\nexport default Friends","import React from 'react';\r\nimport classes from './friends.module.css'\r\n\r\nconst Friends = ({friendList}) => {\r\n\r\n const myFriends = friendList.map(({label}, i) => {\r\n        return (\r\n            <li key={i}>{label}</li>\r\n        )    \r\n        })\r\n    return (\r\n        <div className={classes.Friends}>\r\n            <h2>Friends</h2>\r\n            <ul>{myFriends}</ul>\r\n        </div>\r\n    )\r\n}\r\nexport default Friends","\r\nimport React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { friendType } from \"../../redux/reducers/sidebar\";\r\nimport Friends from \"./friends\";\r\nimport classes from \"./Navbar.module.css\";\r\n\r\ntype navBarPropsType = {\r\n  friendList: Array<friendType>;\r\n};\r\nconst Navbar:React.FC<navBarPropsType> = ({ friendList }) => {\r\n  const list = [\r\n    { label: \"Profile\", to: \"/profile\", exact: false },\r\n    { label: \"Messages\", to: \"/dialogs\", exact: false },\r\n    { label: \"News\", to: \"/news\", exact: false },\r\n    { label: \"Music\", to: \"/music\", exact: false },\r\n    { label: \"Settings\", to: \"/settings\", exact: false },\r\n    { label: \"Users\", to: \"/users\", exact: false },\r\n    // { label: \"Users\", to: \"/users\", exact: false },\r\n  ];\r\n\r\n  const links = list.map(({ label, to, exact }, i) => {\r\n    return (\r\n      <li key={i}>\r\n        <NavLink\r\n          className={classes.item}\r\n          to={to}\r\n          exact={exact}\r\n          activeClassName={classes.active}\r\n        >\r\n          {label}\r\n        </NavLink>\r\n      </li>\r\n    );\r\n  });\r\n  return (\r\n    <nav className={classes.nav}>\r\n      <ul>{links}</ul>\r\n      <Friends friendList={friendList} />\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import { connect } from \"react-redux\";\r\nimport {friendType } from \"../../redux/reducers/sidebar\";\r\nimport { RootStateType } from \"../../redux/reduxStore\";\r\nimport Navbar from \"./Navbar\";\r\n\r\ntype MapStatePropsType = {\r\n  friendList: Array<friendType>;\r\n};\r\nlet mapStateToProps = (state: RootStateType):MapStatePropsType => {\r\n  return {\r\n    friendList: state.sidebar.friendList,\r\n  };\r\n};\r\nconst NavbarContainer = connect<MapStatePropsType, {}, {}, RootStateType>(mapStateToProps)(Navbar);\r\n\r\nexport default NavbarContainer;\r\n","import React from 'react'\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { maxLength, required } from '../../../utils/validators';\r\nimport { TextArea } from '../../common/formControls';\r\n\r\n\r\nexport type PostsDataType = {\r\n  PostFormText: string\r\n}\r\nconst max= maxLength(100)\r\nconst MyPostsF: React.FC<InjectedFormProps<PostsDataType>> = ({\r\n  handleSubmit,\r\n}) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <Field\r\n        component={TextArea}\r\n        name=\"PostFormText\"\r\n        placeholder=\"Type your message\"\r\n        validate={[required, max]}\r\n      />\r\n      <button>Add post</button>\r\n    </form>\r\n  );\r\n};\r\nconst MyPostsForm = reduxForm<PostsDataType>({\r\nform: 'MyPostForm'\r\n})(MyPostsF)\r\n\r\nexport default MyPostsForm","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\n\r\ntype SinglePostType = {\r\n    message: string\r\n    like: number\r\n}\r\nconst Post: React.FC<SinglePostType> = ({message, like}) => {\r\n\r\n  return (\r\n    <li className={s.item}>\r\n      <img src='https://movies4maniacs.liberty.me/wp-content/uploads/sites/1218/2015/09/avatarsucks.jpg' />\r\n        {message }\r\n        <div>\r\n        <span>like {like}</span>\r\n      </div>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport { postListType } from '../../../redux/reducers/profile';\r\nimport classes from './MyPosts.module.css';\r\nimport MyPostsForm, { PostsDataType } from './MyPostsForm';\r\nimport Post from './Post/Post';\r\n\r\nexport type PropsPostType = {\r\n  list: postListType;\r\n  onPostAddedAction: (value: string) => void;\r\n};\r\n\r\nconst MyPosts: React.FC<PropsPostType> = ({\r\n  list,\r\n  onPostAddedAction,\r\n\r\n}) => {\r\n  const postList = list.map(({ post, like }, i) => {\r\n    return <Post key={i} message={post} like={like} />;\r\n  });\r\n\r\n\r\n\r\n  const onPostsFormHandler = (values: PostsDataType) => {\r\n    onPostAddedAction(values.PostFormText);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.Posts}>\r\n      <h2>My Posts</h2>\r\n      <MyPostsForm onSubmit={onPostsFormHandler}/>\r\n      <ul>{postList}</ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MyPosts;","\r\n\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport { getThisStatus, getThisUser,  updateThisStatus,  } from \"../../api/api\";\r\nimport { ProfileType } from \"../reducers/profile\";\r\nimport { RootStateType } from \"../reduxStore\";\r\nimport {ADD_POST,  SET_STATUS, SET__PROFILE} from \"./types\";\r\n\r\n\r\n\r\n\r\ntype auxType<T> = T extends { [key: string]: infer actionType } ? actionType : never\r\nexport type postsActionType = ReturnType<auxType<typeof postsActions>>\r\n\r\n\r\nexport const postsActions = {\r\n onPostAddedAction:(value:string) => {\r\n    return { type: ADD_POST, value } as const;\r\n},\r\nsetProfile:(profile: ProfileType) => {\r\n    return { type: SET__PROFILE, profile } as const;\r\n  },\r\n setStatus: (status:string)=> {\r\n    return { type: SET_STATUS, status } as const\r\n}\r\n}\r\n\r\nexport const setProfileData = (id: string): ThunkAction<void, RootStateType, unknown, postsActionType> => {\r\n  return (dispatch) => {\r\n        getThisUser(id).then((data) => {\r\n      dispatch(postsActions.setProfile(data));\r\n    });\r\n  }\r\n}\r\n\r\nexport const getStatus = (id: string): ThunkAction<void, RootStateType, unknown, postsActionType> => {\r\n  return (dispatch) => {\r\n      getThisStatus(id).then((data) => { \r\n      dispatch(postsActions.setStatus(data));\r\n    });\r\n  }\r\n}\r\n\r\n\r\nexport const setNewStatus = (status: string): ThunkAction<void, RootStateType, unknown, postsActionType> => {\r\n  return (dispatch) => {\r\n    updateThisStatus(status).then((data) => {\r\n      if (data.resultCode === 0) {\r\n        dispatch(postsActions.setStatus(status));\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { RootStateType } from '../../../redux/reduxStore';\r\nimport { connect } from 'react-redux'\r\nimport MyPosts from './MyPosts'\r\nimport { postsActions} from \"../../../redux/actions/myPosts\";\r\nimport {  postListType } from '../../../redux/reducers/profile';\r\n\r\nconst { onPostAddedAction} = postsActions\r\n\r\ntype MapStateType = {\r\n  list: postListType\r\n  \r\n  \r\n}\r\ntype MapDispatchType = {\r\n  onPostAddedAction: (value:string) => void\r\n  \r\n}\r\nlet mapStateToProps = (state:RootStateType):MapStateType => {\r\n  return {\r\n    list: state.profile.postList,\r\n\r\n    \r\n  };\r\n}\r\n\r\nconst MyPostsContainer = connect<MapStateType, MapDispatchType, {}, RootStateType>(mapStateToProps, {onPostAddedAction})(MyPosts)\r\nexport default  MyPostsContainer","import React, { ChangeEvent, useEffect, useState } from 'react'\r\n\r\n\r\nexport type ProfileStatusPropsType = {\r\n  status: string\r\n  setNewStatus: (status: string) => void\r\n}\r\nconst ProfileStatus: React.FC<ProfileStatusPropsType> = ({ status, setNewStatus }) => {\r\n  const [editMode, setEditMode] = useState<boolean>(false)\r\n  const [inputValue, setInputValue] = useState<string>(status)\r\n\r\n  useEffect(() => {\r\n    setInputValue(status)\r\n  }, [status])\r\n\r\n  const onEditMode = () => {\r\n    setEditMode(true)\r\n  }\r\n  const ofEditMode = () => {\r\n    setEditMode(false)\r\n    setNewStatus(inputValue)\r\n  }\r\n  const onStatusUpdate = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setInputValue(e.currentTarget.value)\r\n  };\r\n  return (\r\n    <div>\r\n      {!editMode && (\r\n        <div>\r\n          <span onDoubleClick={onEditMode}>{status || '-------'}</span>\r\n        </div>\r\n      )}\r\n\r\n      {\r\n        editMode && <div>\r\n          <input\r\n            autoFocus onBlur={ofEditMode}\r\n            onChange={onStatusUpdate}\r\n            value={inputValue} />\r\n        </div>\r\n      }\r\n    </div>\r\n  );\r\n}\r\nexport default ProfileStatus","import React, { useEffect } from \"react\";\r\nimport s from \"./Profile.module.css\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport ava from \"../../assets/images/ava.gif\";\r\nimport { ProfileType } from \"../../redux/reducers/profile\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootStateType } from \"../../redux/reduxStore\";\r\nimport { Redirect } from \"react-router\";\r\n\r\ntype ProfilePropsType = {\r\n  profile: ProfileType | null;\r\n  status: string\r\n  setNewStatus: (status:string)=>void\r\n};\r\n\r\nconst Profile: React.FC<ProfilePropsType> = ({ profile, status, setNewStatus }) => {\r\n  let isLogged = useSelector<RootStateType, boolean>((state) => state.auth.isLogged)\r\n    if (!isLogged) {\r\n      return <Redirect to='./login' />\r\n    }\r\n    \r\n  let isProfile = profile ? (\r\n    <>\r\n      <img\r\n        src={!profile.photos.large ? ava : profile.photos.large}\r\n        alt={\"ava\"}\r\n      />\r\n      <div>{profile.fullName}</div>\r\n    </>\r\n  ) : (\r\n    ''\r\n    );\r\n  \r\n  let keys =profile && (Object.keys(profile.contacts) as Array<keyof typeof profile.contacts>);\r\n  let socials = keys?.map((el) => {\r\n    return (\r\n      <li key={el}>\r\n        {el}\r\n        </li>\r\n      )\r\n    })\r\n  \r\n  return (\r\n    <div className={s.content}>\r\n      <div>{isProfile}</div>\r\n      <ProfileStatus status={status} setNewStatus={setNewStatus} />\r\n      <div>{profile?.fullName}</div>\r\n      <div>{profile?.lookingForAJob}</div>\r\n      <div>{profile?.lookingForAJobDescription}</div>\r\n      <ul>{socials}</ul>\r\n      <MyPostsContainer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React, {ComponentType, useEffect } from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport { connect } from \"react-redux\";\r\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\r\nimport { RootStateType } from \"../../redux/reduxStore\";\r\nimport { compose } from \"redux\";\r\nimport { withAuthRedirect } from \"../hoc/authRedirect\";\r\nimport {\r\n  getStatus,\r\n  setProfileData,\r\n  setNewStatus,\r\n} from \"../../redux/actions/myPosts\";\r\nimport { ProfileType } from \"../../redux/reducers/profile\";\r\n\r\ntype MapStateType = {\r\n  profile: ProfileType | null;\r\n  status: string\r\n};\r\ntype MapDispatchType = {\r\n  setProfileData: (id: string) => void;\r\n  getStatus: (status: string) => void;\r\n  setNewStatus: (status: string) => void\r\n};\r\ntype PathParamsType = {\r\n  userId: string\r\n}\r\ntype OwnPropsType = MapStateType & MapDispatchType\r\n\r\ntype ProfileAPIPropsType = RouteComponentProps<PathParamsType> & OwnPropsType\r\n\r\nconst ProfileAPI: React.FC<ProfileAPIPropsType> = ({ match, history, profile, status, setProfileData, getStatus, setNewStatus }) => {\r\n  \r\n  let userId = match.params.userId;\r\n\r\n \r\n  useEffect(() => {\r\n   \r\n    if (!userId) {\r\n      userId = String(profile?.userId);\r\n      if (!userId) {\r\n        history.push(\"/login\");\r\n      }\r\n    }\r\n    setProfileData(userId);\r\n    getStatus(userId);\r\n\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n   \r\n    if (!userId) {\r\n      userId = String(profile?.userId);\r\n      if (!userId) {\r\n        history.push(\"/login\");\r\n      }\r\n    }\r\n    setProfileData(userId);\r\n    getStatus(userId);\r\n  }, [userId]);\r\n\r\n  return <Profile profile={profile} status={status} setNewStatus={setNewStatus} />;\r\n}\r\n\r\nlet mapStateToProps = (state: RootStateType): MapStateType => {\r\n  return {\r\n    profile: state.profile.profile,\r\n    status: state.profile.status,\r\n  };\r\n}\r\n\r\n\r\nconst ProfileContainer = compose<ComponentType>(\r\n  connect<MapStateType, MapDispatchType, {}, RootStateType>(mapStateToProps, {\r\n    setProfileData,\r\n    getStatus,\r\n    setNewStatus\r\n  }),\r\n  withRouter,\r\n  withAuthRedirect\r\n)(ProfileAPI);\r\nexport default ProfileContainer;\r\n","import { FormAction, stopSubmit } from \"redux-form\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport { authMe,  loginMe, logoffMe } from \"../../api/api\";\r\nimport { dataType } from \"../reducers/auth\";\r\nimport { RootStateType } from \"../reduxStore\";\r\nimport { INITIALIZE_DATE, SET_USER_DATA } from \"./types\";\r\n\r\nexport type setUserDataType = ReturnType<typeof setUserData>\r\nexport type StopSubmitType = ReturnType<typeof stopSubmit>\r\nexport type InitializeDataType = ReturnType<typeof initializeData>\r\n\r\nexport const setUserData = (data: dataType, isLogged: boolean) => { \r\n    return { type: SET_USER_DATA, data, isLogged } as const;\r\n}\r\nexport const initializeData = () => {\r\n  return{type: INITIALIZE_DATE} as const\r\n}\r\n\r\n\r\nconst getUserData = (): ThunkAction<void, RootStateType, unknown, setUserDataType> => {\r\n  return (dispatch) => {\r\n        authMe().then((data) => {\r\n          if (data.resultCode === 0) {\r\n            console.log(data.data);\r\n            \r\n          dispatch(setUserData(data.data, true))\r\n        }\r\n        }).catch((e) => {\r\n        console.log({...e});\r\n        \r\n      });\r\n  }\r\n}\r\nexport const initializeUserData = (): ThunkAction<void, RootStateType, unknown, InitializeDataType> => {\r\n  return (dispatch) => {\r\n    let promise = dispatch(getUserData())\r\n    Promise.all([promise]).then(() => {\r\n      dispatch(initializeData())\r\n    })\r\n  }\r\n}\r\nexport const login = (email: string, password: string, rememberMe: boolean):ThunkAction<void, RootStateType, unknown, FormAction> => {\r\n  return (dispatch) => {\r\n    loginMe(email, password, rememberMe).then((data) => {\r\n          if (data.resultCode === 0) {\r\n          dispatch(getUserData())\r\n          } else {\r\n            let errorMessage = data.messages.length > 0 ? data.messages[0] : 'Some error appeared'\r\n            dispatch(stopSubmit('login', { _error: errorMessage }))\r\n          }\r\n      });\r\n  }\r\n}\r\n\r\nexport const logoff = ():ThunkAction<void, RootStateType, unknown, setUserDataType> => {\r\n  return (dispatch) => {\r\n        logoffMe().then((data) => {\r\n          if (data.resultCode === 0) {\r\n         dispatch(setUserData({  id: null, email: null, login: null}, false))\r\n        }\r\n      });\r\n  }\r\n}","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport Preloader from '../Preloader/preloader';\r\nimport s from './Header.module.css';\r\n\r\ntype HeaderPropsType = {\r\n  login: null | string;\r\n  isFetching: boolean;\r\n  isLogged: boolean;\r\n  logoff: () => void;\r\n};\r\nconst Header: React.FC<HeaderPropsType> = ({\r\n  login,\r\n  isFetching,\r\n  isLogged,\r\n  logoff,\r\n}) => {\r\n  const onLogout = () => {\r\n    logoff();\r\n  };\r\n\r\n  let userAvatar = isLogged ? (\r\n    <>\r\n      <img alt=\"ava\" />\r\n      {login}\r\n      <button onClick={onLogout}>Logout</button>\r\n    </>\r\n  ) : (\r\n    <NavLink to=\"/login\"> login</NavLink>\r\n  );\r\n  let loginContent = isFetching ? <Preloader /> : userAvatar;\r\n  return (\r\n    <header className={s.header}>\r\n      <div></div>\r\n      <div className={s.loginContentWrapper}>{loginContent}</div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;","\r\nimport React, { Component } from \"react\";\r\nimport Header from \"./Header\";\r\nimport { AuthDispatchType, AuthMapStateTypes } from \"./HeaderContainer\";\r\n\r\ntype PropsType = AuthMapStateTypes & AuthDispatchType;\r\nclass HeaderRequest extends Component<PropsType> {\r\n\r\n\r\n  render() {\r\n    const { ...headerProps } = this.props;\r\n    return <Header {...headerProps} />;\r\n  }\r\n}\r\nexport default HeaderRequest","\r\nimport { connect } from \"react-redux\";\r\nimport{logoff} from '../../redux/actions/auth'\r\nimport { RootStateType } from \"../../redux/reduxStore\";\r\nimport HeaderRequest from \"./HeaderRequest\";\r\n\r\nexport type AuthMapStateTypes = {\r\n  login: null | string\r\n  isFetching:  boolean\r\n  isLogged: boolean\r\n};\r\nexport type AuthDispatchType = {\r\n  logoff: ()=>void\r\n}\r\nconst mapStateToProps = (state:RootStateType):AuthMapStateTypes => {\r\n  return {\r\n    login: state.auth.login,\r\n    isFetching: state.auth.isFetching,\r\n    isLogged: state.auth.isLogged\r\n  }\r\n}\r\n\r\nconst HeaderContainer = connect<\r\n  AuthMapStateTypes,\r\n  AuthDispatchType,\r\n  {},\r\n  RootStateType\r\n>(mapStateToProps, {logoff })(HeaderRequest);\r\n export default HeaderContainer","import classes from './form.module.css';\r\nimport React from 'react'\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form'\r\nimport { required } from '../../utils/validators';\r\nimport { Input } from '../common/formControls';\r\n\r\nexport type LoginDataType = {\r\n  email: string\r\n  password: string\r\n  rememberMe: boolean\r\n}\r\nconst LoginF: React.FC<InjectedFormProps<LoginDataType>> = ({handleSubmit, error}) => {\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div>\r\n        <Field placeholder=\"Email\" validate={[required]} component={Input} name='email' type=\"email\" />\r\n      </div>\r\n      <div>\r\n        <Field placeholder=\"Password\" validate={[required]} component={Input} name='password' type=\"password\" />\r\n      </div>\r\n      <div>\r\n        <Field  component=\"input\" type=\"checkbox\" name='rememberMe' /> Remember me\r\n      </div>\r\n      {error && <div className={classes.formError}>{error}</div>}\r\n      <div>\r\n        <button>Login</button>\r\n      </div>\r\n    </form>\r\n  );\r\n\r\n\r\n}\r\nconst LoginForm = reduxForm<LoginDataType>({\r\n  form: 'login'\r\n})(LoginF)\r\nexport default LoginForm","import React from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router';\r\nimport { login } from '../../redux/actions/auth';\r\nimport { RootStateType } from '../../redux/reduxStore';\r\nimport LoginForm, { LoginDataType } from './loginForm'\r\n\r\ntype MapDispatchType = {\r\n  login: (email: string, password: string, rememberMe: boolean) => void;\r\n};\r\ntype LoginMapStateType = {\r\n  isLogged: boolean\r\n}\r\n\r\n\r\nconst Login: React.FC<LoginMapStateType & MapDispatchType> = ({login,isLogged}) => {\r\n  const onSubmitData = (formData: LoginDataType) => {\r\n    login(formData.email, formData.password, formData.rememberMe);\r\n  };\r\n\r\n  if (isLogged) {\r\n    return <Redirect to={'/profile'}/>\r\n }\r\n  return (\r\n    <>\r\n      <h2>Login</h2>\r\n      <LoginForm onSubmit={onSubmitData} />\r\n    </>\r\n  )\r\n};\r\n\r\nconst mapStateToProps = (state: RootStateType): LoginMapStateType => {\r\n  return {\r\n    isLogged: state.auth.isLogged,\r\n  };\r\n  \r\n}\r\nexport default connect<LoginMapStateType, MapDispatchType, {}, RootStateType>(mapStateToProps, {login})(Login)","import React, {Component,ComponentType,Suspense} from 'react';\nimport './App.css';\nimport \"antd/dist/antd.css\";\nimport NavbarContainer from './components/Navbar/NavbarContainer';\nimport {Route, withRouter } from 'react-router-dom'\nimport ProfileContainer from './components/Profile/ProfileContainer';\nimport HeaderContainer from './components/Header/HeaderContainer';\nimport Login from './components/Login/login';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { initializeUserData } from \"./redux/actions/auth\";\nimport { RootStateType } from './redux/reduxStore';\nimport Preloader from './components/Preloader/preloader';\nimport { Button } from 'antd';\nconst UsersContainer = React.lazy(()=> import('./components/Users/UsersContainer'))\nconst Dialogs = React.lazy(() => import(\"./components/Dialogs/Dialogs\"));\nconst News = React.lazy(() => import('./components/News'));\nconst Music= React.lazy(() => import('./components/Music/Music'));\nconst Settings = React.lazy(() => import('./components/Settings'));\n\n\n\ntype MapDispatchType = {\n  initializeUserData: () => void;\n};\ntype MapStateType = {\n  initialized: boolean\n}\nclass App  extends Component<MapDispatchType & MapStateType> {\n  componentDidMount() {\n    this.props.initializeUserData();\n  }\n  render() {\n\n    if (!this.props.initialized) {\n      return<Preloader />\n    }\n    \n    return (\n      <div className=\"app-wrapper\">\n        <HeaderContainer />\n        <NavbarContainer />\n        <div className=\"content\">\n          <Suspense fallback={<div>Loading...</div>}>\n            <Route path=\"/dialogs\" render={() => <Dialogs />} />\n            <Route path=\"/news\" component={() => <News />} />\n            <Route path=\"/music\" component={() => <Music />} />\n            <Route path=\"/settings\" component={() => <Settings />} />\n            <Route path=\"/users\" render={() => <UsersContainer />} />\n          </Suspense>\n          <Route path=\"/profile/:userId?\" render={() => <ProfileContainer />} />\n          <Route path=\"/login\" component={Login} />\n        </div>\n      </div>\n    );\n  }\n};\nconst mapStateToProps = (state: RootStateType) => {\n  return {\n    initialized: state.auth.initialized\n  }\n}\nconst AppContainer = compose<ComponentType>(\n  withRouter,\n  connect<MapStateType, MapDispatchType, {}, RootStateType>(mapStateToProps, { initializeUserData })\n)(App);\n\nexport default AppContainer;\n","\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport store, { RootStateType } from \"./redux/reduxStore\";\nimport { Provider } from \"react-redux\";\nimport AppContainer from \"./App\";\nimport { HashRouter } from \"react-router-dom\";\n\nlet renderTree = (state:RootStateType) => {\n  ReactDOM.render(\n    <Provider store={store}>\n      <HashRouter>\n        <AppContainer />\n      </HashRouter>\n    </Provider>,\n    document.getElementById(\"root\")\n  );\n};\nrenderTree(store.getState());\nstore.subscribe(() => {\n  let state = store.getState();\n  renderTree(state);\n});","export const required = (value: string) => {\r\n  return value && value ? undefined : 'This field is required'\r\n}\r\n\r\nexport const maxLength = (max: number) => (value: string) => {\r\n  return value && value.length > max ? `Must be ${max} characters or less` : undefined\r\n}\r\n\r\n","import classes from './formControls.module.css';\r\nimport React from 'react'\r\nimport { WrappedFieldProps } from 'redux-form/lib/Field';\r\n\r\n const FormControls: React.FC<WrappedFieldProps> = ({\r\n   meta,\r\n   ...restProps\r\n }) => {\r\n   let isError = meta.error && meta.touched ? classes.error : \"\";\r\n\r\n   return (\r\n     <div className={`${classes.textArreaWrapper} ${isError}`}>\r\n       {restProps.children}\r\n       {meta.error && meta.touched && <span>{meta.error}</span>}\r\n     </div>\r\n   );\r\n };\r\n\r\nexport const TextArea:React.FC<WrappedFieldProps>  = (props) => {\r\n  const { input, meta, ...restProps } = props\r\n  return (\r\n    <FormControls {...props}>\r\n      <textarea {...restProps} {...input} />\r\n    </FormControls>\r\n  );\r\n};\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n  const { input, meta, ...restProps } = props;\r\n  \r\n  return (\r\n    <FormControls {...props}>\r\n      <input {...restProps} {...input} />\r\n    </FormControls>\r\n  );\r\n};\r\n\r\n","import classes from './preloader.module.css'\r\nimport React from 'react'\r\nimport gif from './151.gif'\r\nconst Preloader = () => {\r\n  return (\r\n    <div className={classes.Preloader}>\r\n      <img src={gif} alt ='gif'/>\r\n    </div>\r\n  )\r\n}\r\nexport default Preloader","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__ABI2P\",\"item\":\"Navbar_item__2CJqH\",\"active\":\"Navbar_active__3XgrU\"};","export const ADD_MESSAGE = 'ADD_MESSAGE';\r\nexport  const ADD_MESSAGE_VALUE = 'ADD_MESSAGE_VALUE';\r\nexport const ADD_POST = 'ADD_POST';\r\nexport const ADD_POST_VALUE = 'ADD_POST_VALUE'\r\nexport const FOLLOW = \"FOLLOW\";\r\nexport const NOFOLLOW = \"NOFOLLOW\";\r\nexport const SET__USERS = \"SET__USERS\";\r\nexport const SET__PAGE = \"SET__PAGE\";\r\nexport const SET__TOTAL = \"SET__TOTAL\";\r\nexport const SET__PAGINATION = \"SET__PAGINATION\";\r\nexport const TOGGLE__PRELOADER = \"TOGGLE__PRELOADER \";\r\nexport const SET__PROFILE = \"SET__PROFILE\"\r\nexport const SET_USER_DATA = 'SET_USER_DATA';\r\nexport const TOGGLE_FOLLOW_STATUS = 'TOGGLE_FOLLOW_STATUS'\r\nexport const SET_STATUS = 'SET_STATUS'\r\nexport const INITIALIZE_DATE = 'INITIALIZE_DATE'","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textArreaWrapper\":\"formControls_textArreaWrapper__1odmS\",\"error\":\"formControls_error__oj7a-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__26yxl\",\"loginContentWrapper\":\"Header_loginContentWrapper__2iJtm\"};","import React, { Component, ComponentType} from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Redirect } from 'react-router'\r\nimport { RootStateType } from '../../redux/reduxStore'\r\n\r\ntype MapStateType = {\r\n  isAuth:boolean\r\n}\r\nlet mapStateToProps = (state: RootStateType):MapStateType => {\r\n  return{\r\n    isAuth: state.auth.isLogged\r\n  }\r\n}\r\n\r\nexport function withAuthRedirect<WCP> (WrappedComponent:ComponentType) {\r\n  class RedirectComponent extends Component< MapStateType>{\r\n    render() {\r\n      let{isAuth, ...restProps} = this.props\r\n      if (!isAuth) return <Redirect to = './login' />\r\n      return <WrappedComponent {...restProps}/>\r\n    }\r\n  }\r\n  let ConnectedAuthRedirectComponent = connect<MapStateType, {}, WCP, RootStateType>(mapStateToProps)(RedirectComponent)\r\n  return ConnectedAuthRedirectComponent;\r\n}"],"sourceRoot":""}