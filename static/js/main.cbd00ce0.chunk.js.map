{"version":3,"sources":["components/Preloader/preloader.tsx","components/common/formControls.module.css","components/hoc/authRedirect.tsx","assets/images/ava.gif","redux/actions/types.ts","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Login/form.module.css","components/Preloader/preloader.module.css","components/Preloader/151.gif","app.module.scss","components/Profile/profile.module.scss","redux/reducers/auth.ts","redux/reducers/profile.ts","redux/reducers/dialogs.ts","redux/reducers/sidebar.ts","redux/reducers/users.ts","redux/reduxStore.ts","components/Profile/MyPosts/MyPostsForm.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","redux/actions/myPosts.ts","components/Profile/MyPosts/MyPostsContainer.ts","components/Profile/ProfileStatus.tsx","components/Profile/profieInfo.tsx","components/Profile/editProfileForm.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","redux/actions/auth.ts","components/Login/loginForm.tsx","components/Login/login.tsx","components/HeaderContent/HeaderLogo.tsx","components/HeaderContent/HeaderNavbarr.tsx","components/HeaderContent/HeaderContent.tsx","components/SidebarContent/SidebarContent.tsx","App.tsx","index.tsx","components/common/formControls.tsx","api/api.ts","utils/validators.ts"],"names":["Preloader","className","classes","src","gif","alt","module","exports","mapStateToProps","state","isAuth","auth","isLogged","withAuthRedirect","WrappedComponent","RedirectComponent","this","props","restProps","to","Component","connect","ADD_MESSAGE","ADD_POST","FOLLOW","NOFOLLOW","SET__USERS","SET__PAGE","SET__TOTAL","SET__PAGINATION","TOGGLE__PRELOADER","SET__PROFILE","SET_USER_DATA","TOGGLE_FOLLOW_STATUS","SET_STATUS","INITIALIZE_DATE","SET_PHOTOS","SET_CAPTCHA","initialState","initialized","id","email","login","imageSrc","isFetching","captcha","postList","post","like","profile","status","users","label","messages","friendList","pageCount","initialPage","total","initialPagination","isFetchingFollow","followInProgress","reducers","combineReducers","action","type","newPost","value","photos","dialogs","sidebar","stateCopy","map","el","followed","stateNewCopy","page","pagination","userId","filter","data","form","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","max","maxLength","MyPostsForm","reduxForm","handleSubmit","onSubmit","Field","component","TextArea","name","placeholder","validate","required","Post","message","s","item","MyPosts","list","onPostAddedAction","i","key","Posts","values","PostFormText","postsActions","setProfileData","dispatch","getThisUser","then","MyPostsContainer","ProfileStatus","setNewStatus","useState","editMode","setEditMode","inputValue","setInputValue","lengthErr","setLengthErr","useEffect","length","onEditMode","ofEditMode","span","onDoubleClick","statusInfo","onClick","autoFocus","onBlur","onChange","e","currentTarget","onKeyDown","ProfileInfo","isOwner","icons","keys","Object","contacts","socials","ava","isSocial","socialItem","href","target","link","disabled","btn","icon","style","textAlign","level","color","justifyContent","display","infoItem","infoName","infoDescr","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","justify","gutter","EditProfileForm","error","Input","toLowerCase","submitBtn","Profile","setNewPhoto","setUpdatedProfile","useSelector","isProfile","hoverable","width","cover","large","info","file","UploadOutlined","profileWrap","initialValues","ProfileContainer","authId","getStatus","getThisStatus","updateThisStatus","resultCode","catch","updatePhoto","getState","a","currentId","Id","toString","updateProfile","response","stopSubmit","_error","substring","Promise","reject","withRouter","match","history","params","String","push","setUserData","getUserData","authMe","initializeUserData","promise","all","getCaptcha","getCaptchaUrl","url","LoginForm","fontSize","formError","password","rememberMe","loginMe","errorMessage","formData","HeaderLogo","useDispatch","authDates","userAvatar","marginRight","danger","PoweroffOutlined","logoffMe","loginContent","align","height","HeaderNavbar","location","l","active","setActive","links","exact","Item","theme","mode","selectedKeys","HeaderContent","padding","SidebarContent","menuKey","setMenuKey","sub","setSub","profileMenuItems","openKeys","borderRight","UserOutlined","title","onTitleClick","TeamOutlined","UsersContainer","React","lazy","Dialogs","News","Music","Settings","Content","Layout","Sider","AppContainer","isInit","loc","useLocation","pathname","slice","styles","layout","margin","minHeight","path","render","fallback","Login","renderTree","ReactDOM","document","getElementById","subscribe","FormControls","meta","isError","touched","textArreaWrapper","children","input","instance","axios","create","baseURL","withCredentials","headers","getItems","pageNumber","get","followThisUser","noFollowThisUser","delete","put","FormData","append","undefined"],"mappings":"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","file":"static/js/main.cbd00ce0.chunk.js","sourcesContent":["import classes from './preloader.module.css'\r\nimport React from 'react'\r\nimport gif from './151.gif'\r\nconst Preloader = () => {\r\n  return (\r\n    <div className={classes.Preloader}>\r\n      <img src={gif} alt ='gif'/>\r\n    </div>\r\n  )\r\n}\r\nexport default Preloader","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textArreaWrapper\":\"formControls_textArreaWrapper__1odmS\",\"error\":\"formControls_error__oj7a-\"};","import React, { Component, ComponentType} from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Redirect } from 'react-router'\r\nimport { RootStateType } from '../../redux/reduxStore'\r\n\r\ntype MapStateType = {\r\n  isAuth:boolean\r\n}\r\nlet mapStateToProps = (state: RootStateType):MapStateType => {\r\n  return{\r\n    isAuth: state.auth.isLogged\r\n  }\r\n}\r\n\r\nexport function withAuthRedirect<WCP> (WrappedComponent:ComponentType) {\r\n  class RedirectComponent extends Component< MapStateType>{\r\n    render() {\r\n      let{isAuth, ...restProps} = this.props\r\n      if (!isAuth) return <Redirect to = './login' />\r\n      return <WrappedComponent {...restProps}/>\r\n    }\r\n  }\r\n  let ConnectedAuthRedirectComponent = connect<MapStateType, {}, WCP, RootStateType>(mapStateToProps)(RedirectComponent)\r\n  return ConnectedAuthRedirectComponent;\r\n}","module.exports = __webpack_public_path__ + \"static/media/ava.e36197b5.gif\";","export const ADD_MESSAGE = 'ADD_MESSAGE';\r\nexport  const ADD_MESSAGE_VALUE = 'ADD_MESSAGE_VALUE';\r\nexport const ADD_POST = 'ADD_POST';\r\nexport const ADD_POST_VALUE = 'ADD_POST_VALUE'\r\nexport const FOLLOW = \"FOLLOW\";\r\nexport const NOFOLLOW = \"NOFOLLOW\";\r\nexport const SET__USERS = \"SET__USERS\";\r\nexport const SET__PAGE = \"SET__PAGE\";\r\nexport const SET__TOTAL = \"SET__TOTAL\";\r\nexport const SET__PAGINATION = \"SET__PAGINATION\";\r\nexport const TOGGLE__PRELOADER = \"TOGGLE__PRELOADER \";\r\nexport const SET__PROFILE = \"SET__PROFILE\"\r\nexport const SET_USER_DATA = 'SET_USER_DATA';\r\nexport const TOGGLE_FOLLOW_STATUS = 'TOGGLE_FOLLOW_STATUS'\r\nexport const SET_STATUS = 'SET_STATUS'\r\nexport const INITIALIZE_DATE = 'INITIALIZE_DATE'\r\nexport const SET_PHOTOS = 'SET_PHOTOS'\r\nexport const SET_CAPTCHA = 'SET_CAPTCHA'","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Posts\":\"MyPosts_Posts__uJhQY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2wdbA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formError\":\"form_formError__P2Q79\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Preloader\":\"preloader_Preloader__3coKa\"};","module.exports = __webpack_public_path__ + \"static/media/151.027520c2.gif\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"layout\":\"app_layout__1e_Ix\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileWrap\":\"profile_profileWrap__2puNB\",\"socialItem\":\"profile_socialItem__1GtMD\",\"link\":\"profile_link__22jE6\",\"btn\":\"profile_btn__Rb8lD\",\"infoItem\":\"profile_infoItem__1pf6F\",\"infoName\":\"profile_infoName__1Pd9D\",\"infoDescr\":\"profile_infoDescr__2NxWe\",\"status\":\"profile_status__3YY9w\",\"statusInfo\":\"profile_statusInfo__3Tdf5\",\"title\":\"profile_title__2zekw\",\"submitBtn\":\"profile_submitBtn__3-XxP\"};","import { SET_CAPTCHA } from './../actions/types';\r\n\r\nimport { InitializeDataType, SetCaptchaType, setUserDataType } from \"../actions/auth\";\r\nimport {  INITIALIZE_DATE, SET_USER_DATA } from \"../actions/types\";\r\n\r\n\r\nexport type dataType = {\r\n  id: null | number\r\n  email: null | string\r\n  login: null | string\r\n  \r\n}\r\nexport type authStateType = dataType & {\r\n  initialized: boolean\r\n  isFetching: boolean\r\n  isLogged: boolean\r\n  imageSrc: null | string\r\n  captcha: null | string\r\n}\r\n\r\nconst initialState: authStateType = {\r\n  initialized: false,\r\n  id: null,\r\n  email: null,\r\n  login: null,\r\n  imageSrc:null,\r\n  isFetching: true,\r\n  isLogged: false,\r\n  captcha: null \r\n}\r\n\r\nexport const authReducer = (state: authStateType = initialState, action: setUserDataType | InitializeDataType | SetCaptchaType)\r\n  : authStateType => {\r\n  switch (action.type) {\r\n      case SET_USER_DATA: return { ...state, isLogged: action.isLogged, isFetching: false, ...action.data }\r\n    case INITIALIZE_DATE: return { ...state, initialized: true, isFetching: false }\r\n    case SET_CAPTCHA: return{...state, captcha: action.captcha}\r\n        default:\r\n        { return state } \r\n        \r\n    }\r\n}\r\n","import { postsActionType} from \"../actions/myPosts\";\r\nimport { ADD_POST, SET_PHOTOS, SET_STATUS, SET__PROFILE } from \"../actions/types\";\r\nimport { ContactsType, PhotosType } from \"./users\";\r\n\r\nexport type postType = { post: string, like: number }\r\nexport type postListType = Array<postType>\r\nexport type newPostTextType = string\r\n\r\n\r\nexport type ProfileType = {\r\n  userId: number\r\n  contacts: ContactsType\r\n  fullName: string\r\n  lookingForAJob: false\r\n  lookingForAJobDescription: null | string\r\n    photos: PhotosType\r\n    aboutMe: string\r\n  \r\n}\r\nexport type profileStateType = typeof initialState\r\n\r\nconst initialState= {\r\n    postList: [\r\n        {post: \"My message\", like: 1},\r\n        { post: \"My second message\", like: 6 }],\r\n    profile: null as ProfileType | null,\r\n\r\n    status: ''\r\n}\r\n\r\nexport const profileReducer = (state: profileStateType = initialState, action: postsActionType): profileStateType => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let newPost = { post: action.value, like: 3 }\r\n            return {\r\n                ...state,\r\n                postList: [...state.postList, newPost],\r\n            }\r\n        }\r\n        case SET__PROFILE:\r\n            return { ...state, profile: action.profile }\r\n\r\n        case SET_STATUS:\r\n            return { ...state, status: action.status }\r\n        case SET_PHOTOS: \r\n            return {...state, profile:{...state.profile, photos:action.photos} as ProfileType }\r\n        default:\r\n            { return state }\r\n    }\r\n}","\r\nimport { dialogsType } from \"../actions/messages\";\r\nimport { ADD_MESSAGE } from \"../actions/types\";\r\n\r\nexport type userType = { label: string }\r\nexport type usersType = typeof initialState.users\r\nexport type messageType = { label: string, id: number }\r\nexport type messagesType = Array<messageType>\r\n\r\nexport type dialogsStateType = typeof initialState\r\n\r\nconst initialState = {\r\n        users: [\r\n            {label: \"Anna\"},\r\n            {label: \"Natalya\"},  \r\n            {label: \"Vladimir\"},\r\n            {label: \"Mike\"},\r\n            {label: \"John\"},\r\n            {label: \"Piter\"},\r\n            {label: \"Alex\"},\r\n            {label: \"Frank\"}\r\n        ],  \r\n\r\n        messages: [\r\n            { label: \"I am fine\", id: 1 },\r\n            { label: \"Hello\", id: 2 },\r\n            { label: \"What is you name?\", id: 3},\r\n            { label: \"Look at this!\", id: 4},\r\n            { label: \"Yo bro!\", id: 5}\r\n        ]\r\n}\r\n    \r\nexport const dialogReducer = (state:dialogsStateType = initialState, action:dialogsType):dialogsStateType => {\r\n  switch (action.type) {\r\n    case ADD_MESSAGE: {\r\n      let newPost = { label: action.value, id: 34 };\r\n      return {\r\n        ...state,  \r\n        messages:[...state.messages, newPost]\r\n      }\r\n      \r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};","\r\nexport type friendType = {\r\n  label:string\r\n}\r\nexport type friendsType = Array<friendType>\r\n\r\nexport type friendsStateType = typeof initialState\r\nconst initialState = {\r\n    friendList: [\r\n        { label: 'Andrew' },\r\n        { label: 'Sasha' },\r\n        {label: 'Sveta'}\r\n    ]\r\n}\r\nexport const sidebarReducer = (state:friendsStateType = initialState, action:any):friendsStateType=> {\r\n    return state\r\n}","import {\r\n  FOLLOW,\r\n  NOFOLLOW,\r\n  SET__PAGE,\r\n  SET__USERS,\r\n  SET__TOTAL,\r\n  SET__PAGINATION,\r\n  TOGGLE__PRELOADER,\r\n  TOGGLE_FOLLOW_STATUS,\r\n} from \"../actions/types\";\r\nimport { usersActionType } from \"../actions/users\";\r\n\r\n\r\nexport type PhotosType = {\r\n  small: null | string\r\n  large: null | string\r\n}\r\nexport type UserType = {\r\n  id: number\r\n  name: string\r\n  photos: PhotosType\r\n  status: null | string\r\n  followed: boolean\r\n}\r\nexport type UsersType = Array<UserType>\r\n\r\nexport type ContactsType = {\r\n  facebook: null | string  \r\n  website: null | string \r\n  vk: null | string \r\n  twitter: null | string \r\n  instagram: null | string \r\n  github: null | string \r\n  youtube: null | string \r\n  mainLink: null | string \r\n}\r\n\r\nexport type UsersStateType = typeof initialState\r\nconst initialState = {\r\n  users: [] as UsersType,\r\n  pageCount: 5,\r\n  initialPage: 1,\r\n  total: 0,\r\n  initialPagination: 0,\r\n  isFetching: false,\r\n  isFetchingFollow: false,\r\n  followInProgress: [] as Array<number>\r\n};\r\n\r\nexport const usersReducer = (state:UsersStateType = initialState, action:usersActionType):UsersStateType => {\r\n  switch (action.type) {\r\n    case FOLLOW:\r\n      let stateCopy = {\r\n        ...state,\r\n        users: state.users.map((el) => {\r\n          if (el.id === action.id) {\r\n            el.followed = true;\r\n            return el;\r\n          }\r\n          return el;\r\n        }),\r\n      };\r\n      return stateCopy;\r\n    case NOFOLLOW:\r\n      let stateNewCopy = {\r\n        ...state,\r\n        users: state.users.map((el) => {\r\n          if (el.id === action.id) {\r\n            el.followed = false;\r\n            return el;\r\n          }\r\n          return el;\r\n        }),\r\n      };\r\n      return stateNewCopy;\r\n    case SET__PAGE:\r\n      return { ...state, initialPage: action.page };\r\n    case SET__TOTAL:\r\n      return { ...state, total: action.total };\r\n    case SET__PAGINATION:\r\n      return { ...state, initialPagination: action.pagination };\r\n    case SET__USERS:\r\n      return { ...state, users: [...action.users] };\r\n    case TOGGLE__PRELOADER:\r\n      return {...state, isFetching: action.isFetching}\r\n    case TOGGLE_FOLLOW_STATUS: \r\n      return {\r\n        ...state,\r\n        followInProgress: action.isFetchingFollow\r\n          ? [...state.followInProgress, action.userId]\r\n          : state.followInProgress.filter((el)=> el !== action.userId)\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n\r\n","import { authReducer } from './reducers/auth';\r\nimport {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {profileReducer} from \"./reducers/profile\";\r\nimport {dialogReducer} from \"./reducers/dialogs\";\r\nimport { sidebarReducer } from \"./reducers/sidebar\";\r\nimport { usersReducer } from \"./reducers/users\";\r\nimport thunk from 'redux-thunk';\r\nimport{ reducer as formReducer} from 'redux-form'\r\n\r\n\r\nconst reducers = combineReducers({\r\n  profile: profileReducer,\r\n  dialogs: dialogReducer,\r\n  sidebar: sidebarReducer,\r\n  users: usersReducer,\r\n  auth: authReducer,\r\n  form: formReducer\r\n});\r\n\r\n\r\ntype rootReducerType = typeof reducers\r\nexport type RootStateType = ReturnType<rootReducerType>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunk)))\r\nexport default store","import React from 'react'\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { maxLength, required } from '../../../utils/validators';\r\nimport { TextArea } from '../../common/formControls';\r\n\r\n\r\nexport type PostsDataType = {\r\n  PostFormText: string\r\n}\r\nconst max= maxLength(100)\r\nconst MyPostsF: React.FC<InjectedFormProps<PostsDataType>> = ({\r\n  handleSubmit,\r\n}) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <Field\r\n        component={TextArea}\r\n        name=\"PostFormText\"\r\n        placeholder=\"Type your message\"\r\n        validate={[required, max]}\r\n      />\r\n      <button>Add post</button>\r\n    </form>\r\n  );\r\n};\r\nconst MyPostsForm = reduxForm<PostsDataType>({\r\nform: 'MyPostForm'\r\n})(MyPostsF)\r\n\r\nexport default MyPostsForm","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\n\r\ntype SinglePostType = {\r\n    message: string\r\n    like: number\r\n}\r\nconst Post: React.FC<SinglePostType> = ({message, like}) => {\r\n\r\n  return (\r\n    <li className={s.item}>\r\n      <img src='https://movies4maniacs.liberty.me/wp-content/uploads/sites/1218/2015/09/avatarsucks.jpg' />\r\n        {message }\r\n        <div>\r\n        <span>like {like}</span>\r\n      </div>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport { postListType } from '../../../redux/reducers/profile';\r\nimport classes from './MyPosts.module.css';\r\nimport MyPostsForm, { PostsDataType } from './MyPostsForm';\r\nimport Post from './Post/Post';\r\n\r\nexport type PropsPostType = {\r\n  list: postListType;\r\n  onPostAddedAction: (value: string) => void;\r\n};\r\n\r\nconst MyPosts: React.FC<PropsPostType> = ({\r\n  list,\r\n  onPostAddedAction,\r\n\r\n}) => {\r\n  const postList = list.map(({ post, like }, i) => {\r\n    return <Post key={i} message={post} like={like} />;\r\n  });\r\n\r\n\r\n\r\n  const onPostsFormHandler = (values: PostsDataType) => {\r\n    onPostAddedAction(values.PostFormText);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.Posts}>\r\n      <h2>My Posts</h2>\r\n      <MyPostsForm onSubmit={onPostsFormHandler}/>\r\n      <ul>{postList}</ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MyPosts;","\r\nimport { Action } from 'redux';\r\nimport { FormAction, stopSubmit } from 'redux-form';\r\nimport { ThunkAction, ThunkDispatch } from \"redux-thunk\";\r\nimport { getThisStatus, getThisUser, updatePhoto, updateProfile, updateThisStatus, } from \"../../api/api\";\r\nimport { ProfileDataType } from \"../../components/Profile/editProfileForm\";\r\nimport { ProfileType } from \"../reducers/profile\";\r\nimport { PhotosType } from \"../reducers/users\";\r\nimport { RootStateType } from \"../reduxStore\";\r\nimport { ADD_POST, SET_PHOTOS, SET_STATUS, SET__PROFILE } from \"./types\";\r\n\r\n\r\n\r\n\r\ntype auxType<T> = T extends { [key: string]: infer actionType } ? actionType : never\r\nexport type postsActionType = ReturnType<auxType<typeof postsActions>>\r\n\r\n\r\nexport const postsActions = {\r\n  onPostAddedAction: (value: string) => {\r\n    return { type: ADD_POST, value } as const;\r\n  },\r\n  setProfile: (profile: ProfileType) => {\r\n    return { type: SET__PROFILE, profile } as const;\r\n  },\r\n  setStatus: (status: string) => {\r\n    return { type: SET_STATUS, status } as const\r\n  },\r\n  setPhotos: (photos: PhotosType) => {\r\n    return { type: SET_PHOTOS, photos } as const\r\n  }\r\n}\r\n\r\n\r\nexport const setProfileData = (id: string): ThunkAction<void, RootStateType, unknown, postsActionType> => {\r\n  return (dispatch) => {\r\n    getThisUser(id).then((data) => {\r\n      dispatch(postsActions.setProfile(data));\r\n    });\r\n  }\r\n}\r\n\r\nexport const getStatus = (id: string): ThunkAction<void, RootStateType, unknown, postsActionType> => {\r\n  return (dispatch) => {\r\n    getThisStatus(id).then((data) => {\r\n      dispatch(postsActions.setStatus(data));\r\n    });\r\n  }\r\n}\r\n\r\n\r\nexport const setNewStatus = (status: string): ThunkAction<void, RootStateType, unknown, postsActionType> => {\r\n  return (dispatch) => {\r\n    updateThisStatus(status).then((data) => {\r\n      if (data.resultCode === 0) {\r\n        dispatch(postsActions.setStatus(status));\r\n      }\r\n    }).catch((e) => {\r\n      debugger\r\n    })\r\n  }\r\n}\r\n\r\nexport const setNewPhoto = (ava: string | Blob): ThunkAction<void, RootStateType, unknown, postsActionType> => {\r\n  return (dispatch) => {\r\n    updatePhoto(ava).then((data) => {\r\n      if (data.resultCode === 0) {\r\n        dispatch(postsActions.setPhotos(data.data.photos))\r\n      }\r\n    }).catch((e) => {\r\n      \r\n    })\r\n  }\r\n}\r\n\r\nexport const setUpdatedProfile = (profile: ProfileDataType): ThunkType => async (dispatch, getState) => {\r\n  let currentId = getState().auth.id\r\n  let Id = currentId && currentId.toString()\r\n  const response = await updateProfile(profile);\r\n  if (response.resultCode === 0) {\r\n    dispatch(setProfileData(Id as string))\r\n  }else {\r\n    dispatch(stopSubmit('myProfileForm', { _error: response.messages[0].substring(30, response.messages[0].length-1) }))\r\n    return Promise.reject(response.messages[0])\r\n  }\r\n\r\n}\r\nexport type BaseThunkType<A extends Action = Action, R = Promise<void>> = ThunkAction<R, RootStateType, unknown, A>\r\ntype ThunkType = BaseThunkType<postsActionType | FormAction>","import { RootStateType } from '../../../redux/reduxStore';\r\nimport { connect } from 'react-redux'\r\nimport MyPosts from './MyPosts'\r\nimport { postsActions} from \"../../../redux/actions/myPosts\";\r\nimport {  postListType } from '../../../redux/reducers/profile';\r\n\r\nconst { onPostAddedAction} = postsActions\r\n\r\ntype MapStateType = {\r\n  list: postListType\r\n  \r\n  \r\n}\r\ntype MapDispatchType = {\r\n  onPostAddedAction: (value:string) => void\r\n  \r\n}\r\nlet mapStateToProps = (state:RootStateType):MapStateType => {\r\n  return {\r\n    list: state.profile.postList,\r\n\r\n    \r\n  };\r\n}\r\n\r\nconst MyPostsContainer = connect<MapStateType, MapDispatchType, {}, RootStateType>(mapStateToProps, {onPostAddedAction})(MyPosts)\r\nexport default  MyPostsContainer","import classes from './profile.module.scss'\r\nimport { Alert, Button, Col, Input, Row } from 'antd'\r\nimport React, { ChangeEvent, KeyboardEventHandler, useEffect, useState } from 'react'\r\n\r\n\r\nexport type ProfileStatusPropsType = {\r\n  status: string\r\n  setNewStatus: (status: string) => void\r\n}\r\nconst ProfileStatus: React.FC<ProfileStatusPropsType> = ({ status, setNewStatus }) => {\r\n  const [editMode, setEditMode] = useState<boolean>(false)\r\n  const [inputValue, setInputValue] = useState<string>(status)\r\n  const [lengthErr, setLengthErr] = useState<boolean>(false)\r\n\r\n  useEffect(() => {\r\n    setInputValue(status)\r\n  }, [status])\r\n  useEffect(() => {\r\n    if (inputValue.length >= 100) {\r\n      setLengthErr(true);\r\n    } else {\r\n      setLengthErr(false);\r\n    }\r\n  }, [inputValue])\r\n  \r\n\r\n  const onEditMode = () => {\r\n    setEditMode(true)\r\n    setLengthErr(false)\r\n  }\r\n  const ofEditMode = () => {\r\n    setEditMode(false)\r\n    inputValue.length <= 100 && setNewStatus(inputValue);\r\n    setLengthErr(false)\r\n  }\r\n  const onStatusUpdate = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setInputValue(e.currentTarget.value)\r\n  }\r\n  const onKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    e.key === 'Enter' && ofEditMode()\r\n  };\r\n  return (\r\n    <Col span={24}>\r\n      {!editMode && (\r\n        <Row>\r\n          <Col span={4} className={classes.status}>\r\n            Status:{\" \"}\r\n          </Col>\r\n          <Col\r\n            span={18}\r\n            onDoubleClick={onEditMode}\r\n            className={classes.statusInfo}\r\n          >\r\n            {status || \"-------\"}\r\n          </Col>\r\n          <Button type=\"primary\" onClick={onEditMode}>\r\n            Edit status\r\n          </Button>\r\n        </Row>\r\n      )}\r\n\r\n      {editMode && (\r\n        <Col span={24}>\r\n          <Input\r\n            autoFocus\r\n            onBlur={ofEditMode}\r\n            onChange={onStatusUpdate}\r\n            value={inputValue}\r\n            onKeyDown={onKeyDown}\r\n          />\r\n          {lengthErr && <Alert message=\"To long. Status must be max of 100 characters length\" type=\"error\" />}\r\n        </Col>\r\n      )}\r\n    </Col>\r\n  );\r\n}\r\nexport default ProfileStatus","import classes from './profile.module.scss';\r\nimport { Avatar, Button, Col, Row, Typography } from 'antd';\r\nimport Title from 'antd/lib/typography/Title';\r\nimport React from 'react'\r\nimport { ProfileType } from '../../redux/reducers/profile'\r\n\r\ntype ProfileInfoTypes = {\r\n  profile: ProfileType | null\r\n  isOwner: boolean\r\n  onEditMode: () => void\r\n}\r\nconst ProfileInfo: React.FC<ProfileInfoTypes> = ({ profile, isOwner, onEditMode }) => {\r\n\r\n  let icons = [\r\n    \"https://www.flaticon.com/svg/vstatic/svg/174/174848.svg?token=exp=1615116821~hmac=ce3a4d12d3b7e6424ba13eb78a48df5a\",\r\n    \"https://www.flaticon.com/svg/vstatic/svg/148/148798.svg?token=exp=1615117084~hmac=078035593addf26da48a95b4ba4d1348\",\r\n    \"https://www.flaticon.com/svg/vstatic/svg/145/145813.svg?token=exp=1615117142~hmac=2fd61506319c3e91f5bf51950b984352\",\r\n    \"https://www.flaticon.com/svg/vstatic/svg/145/145812.svg?token=exp=1615117179~hmac=0393be8199452249ae25d771542c25d3\",\r\n    \"https://www.flaticon.com/svg/vstatic/svg/1384/1384063.svg?token=exp=1615117262~hmac=675e64cb2fe1809c132fbe750f6df1c2\",\r\n    \"https://www.flaticon.com/svg/vstatic/svg/1384/1384060.svg?token=exp=1615117306~hmac=5f589a78aa59f050a0f4ef289c5bbecd\",\r\n    \"https://www.flaticon.com/svg/vstatic/svg/733/733553.svg?token=exp=1615117346~hmac=d1818f763998f6b8f3b9b76415ce6428\",\r\n    \"https://www.flaticon.com/svg/vstatic/svg/1946/1946433.svg?token=exp=1615117414~hmac=67f159f2a05f1e3c209a567fd48a8115\",\r\n  ];\r\n  let keys = profile && (Object.keys(profile.contacts) as Array<keyof typeof profile.contacts>);\r\n\r\n  let socials = keys?.map((el, i) => {\r\n    return { name: el, ava: icons[i] };\r\n  }).map((el) => {\r\n    let isSocial = profile?.contacts[el.name] !== null ? profile?.contacts[el.name] : \"\";\r\n    return (\r\n      <Col key={el.name} span={12} className={classes.socialItem}>\r\n        <a href={isSocial as any} target={\"_blank\"} className={classes.link}>\r\n          <Button\r\n            type=\"default\"\r\n            disabled={!isSocial}\r\n            className={classes.btn}\r\n            icon={<Avatar src={el.ava} />}\r\n          />\r\n        </a>\r\n      </Col>\r\n    );\r\n  })\r\n  return (\r\n    <Typography >\r\n      <Row>\r\n        <Col span={20} style={{ textAlign: \"center\" }}>\r\n          <Title level={2} style={{color: 'wheat'}}>Profile info</Title>\r\n        </Col>\r\n        <Col span={4} style={{ justifyContent: \"flex-end\", display: \"flex\" }}>\r\n          {isOwner && (\r\n            <Button onClick={() => onEditMode()} type=\"primary\">\r\n              Edit Profile\r\n            </Button>\r\n          )}\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col span={12}>\r\n          <Title level={4} style={{color: 'wheat'}}>General:</Title>\r\n          <Row className={classes.infoItem}>\r\n            <Col className={classes.infoName}span={10}> Name:</Col>\r\n            <Col className={classes.infoDescr} span={8}>{profile?.fullName}</Col>\r\n          </Row>\r\n          <Row className={classes.infoItem}>\r\n            <Col className={classes.infoName}span={10}> Looking for a job:</Col>\r\n            <Col className={classes.infoDescr} span={8}>{profile?.lookingForAJob ? \"Yes\" : \"No\"}</Col>\r\n          </Row>\r\n          <Row className={classes.infoItem}>\r\n            <Col className={classes.infoName} span={10}> Job description:</Col>\r\n            <Col className={classes.infoDescr} span={8}>{profile?.lookingForAJobDescription}</Col>\r\n          </Row>\r\n          <Row className={classes.infoItem}>\r\n            <Col className={classes.infoName}span={10}> AboutMe:</Col>\r\n            <Col className={classes.infoDescr} span={8}>{profile?.aboutMe}</Col>\r\n          </Row>\r\n        </Col>\r\n        <Col span={12}>\r\n          <Title level={4} style={{color: 'wheat'}}>Contacts:</Title>\r\n          <Row justify='space-between' gutter={4}>\r\n            {socials}\r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n    </Typography>\r\n  );\r\n}\r\nexport default ProfileInfo","import classes from './profile.module.scss';\r\nimport { Button, Col, Row } from 'antd';\r\nimport Title from 'antd/lib/typography/Title';\r\nimport React from 'react'\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { ProfileType } from '../../redux/reducers/profile'\r\nimport { Input, TextArea } from '../common/formControls';\r\n\r\n type ProfileFormType = {\r\n  profile: ProfileType | null\r\n}\r\nexport type ProfileDataType = {\r\n  FullName: string;\r\n  lookingForAJob: boolean;\r\n  lookingForAJobDescription: string;\r\n  AboutMe: string\r\n  contacts: {\r\n    facebook: string\r\n    vk: string\r\n    website: string\r\n    twitter: string\r\n    instagram: string\r\n    youtube: string\r\n    github: string\r\n    mainLink: string\r\n  }\r\n};\r\nconst ProfileForm: React.FC<ProfileFormType & InjectedFormProps<ProfileDataType, ProfileFormType>> = ({ profile, handleSubmit, error }) => {\r\n      let keys = profile && (Object.keys(profile.contacts) as Array<keyof typeof profile.contacts>);\r\n    let socials = keys?.map((el) => {\r\n      return (\r\n        <li key={el}>\r\n          {el}: <Field component={Input} name={`contacts.${el}`} />\r\n          {error && error.toLowerCase() === el.toLowerCase() && <div>{`${error} field error: Url must be in format \"https://${error.toLowerCase()}...\"`}</div>}\r\n        </li>\r\n      );\r\n    });\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <Row>\r\n        <Col span={18} style={{ textAlign: \"center\" }}>\r\n          <Title level={2} style={{ color: \"wheat\" }}>\r\n            Set new info\r\n          </Title>\r\n        </Col>\r\n        <Col span={6} style={{ justifyContent: \"flex-end\", display: \"flex\" }}>\r\n        <button type=\"submit\" className={classes.submitBtn}>Save</button>\r\n        </Col>\r\n      </Row>\r\n\r\n      <div>\r\n        Name:\r\n        <Field component={Input} name=\"fullName\" validate={[]} />\r\n      </div>\r\n      <div>\r\n        Looking for a job:\r\n        <Field\r\n          component={Input}\r\n          name=\"lookingForAJob\"\r\n          type={\"checkbox\"}\r\n          validate={[]}\r\n        />\r\n      </div>\r\n      <div>\r\n        Job description:\r\n        <Field\r\n          component={TextArea}\r\n          name=\"lookingForAJobDescription\"\r\n          validate={[]}\r\n        />\r\n      </div>\r\n      <div>\r\n        Job description:\r\n        <Field component={TextArea} name=\"aboutMe\" validate={[]} />\r\n      </div>\r\n      <div>\r\n        Contacts:\r\n        <ul>{socials}</ul>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\nconst EditProfileForm = reduxForm<ProfileDataType, ProfileFormType>({\r\n  form: \"myProfileForm\",\r\n})(ProfileForm);\r\nexport default EditProfileForm","import React, {  useState} from \"react\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport ava from \"../../assets/images/ava.gif\";\r\nimport { ProfileType } from \"../../redux/reducers/profile\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootStateType } from \"../../redux/reduxStore\";\r\nimport { Redirect } from \"react-router\";\r\nimport ProfileInfo from \"./profieInfo\";\r\nimport EditProfileForm, { ProfileDataType } from \"./editProfileForm\";\r\nimport { Button, Card,Upload, Row, Col } from \"antd\";\r\nimport { UploadOutlined } from \"@ant-design/icons\";\r\nimport { UploadChangeParam } from \"antd/lib/upload\";\r\nimport { UploadFile } from \"antd/lib/upload/interface\";\r\nimport classes from \"./profile.module.scss\";\r\n\r\ntype ProfilePropsType = {\r\n  profile: ProfileType | null;\r\n  status: string;\r\n  setNewStatus: (status: string) => void;\r\n  isOwner: boolean;\r\n  setNewPhoto: (ava: UploadFile<any>) => void;\r\n  setUpdatedProfile: (data: ProfileDataType) => Promise<any>;\r\n};\r\n\r\nconst Profile: React.FC<ProfilePropsType> = ({\r\n  profile,\r\n  status,\r\n  setNewStatus,\r\n  isOwner,\r\n  setNewPhoto,\r\n  setUpdatedProfile,\r\n}) => {\r\n  let isLogged = useSelector<RootStateType, boolean>(\r\n    (state) => state.auth.isLogged\r\n  );\r\n  const [editMode, setEditMode] = useState<boolean>(false);\r\n\r\n  if (!isLogged) {\r\n    return <Redirect to=\"./login\" />;\r\n  }\r\n  const onPhotoChange = (info: UploadChangeParam<UploadFile<any>>) => {\r\n    setNewPhoto(info.file);\r\n    if(info.file.status === 'error'){return}\r\n  };\r\n\r\n  let isProfile = profile ? (\r\n    <Card\r\n      hoverable\r\n      style={{ width: 240 }}\r\n      cover={<img alt=\"ava\"\r\n          src={!profile.photos.large ? ava : profile.photos.large}/>}>\r\n      <div style={{textAlign: 'center'}}>\r\n        {isOwner && (\r\n          <Upload name=\"file\" onChange={onPhotoChange}>\r\n            <Button icon={<UploadOutlined />}>Upload avatar</Button>\r\n          </Upload>\r\n          \r\n        )}\r\n      </div>\r\n    </Card>\r\n  ) : (\r\n    \"\"\r\n  );\r\n\r\n  const onSubmit = (data: ProfileDataType) => {\r\n\r\n    setUpdatedProfile(data)\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Row className={classes.profileWrap}>\r\n        <Col span={7}>{isProfile}</Col>\r\n        <Col span={17}>\r\n          {editMode ? (\r\n            <EditProfileForm\r\n              initialValues={profile as Partial<ProfileDataType> | undefined}\r\n              profile={profile}\r\n              onSubmit={onSubmit}\r\n            />\r\n          ) : (\r\n            <ProfileInfo\r\n              profile={profile}\r\n              isOwner={isOwner}\r\n              onEditMode={() => setEditMode(true)}\r\n            />\r\n          )}\r\n        </Col>\r\n      </Row>\r\n\r\n      <ProfileStatus status={status} setNewStatus={setNewStatus}/>\r\n\r\n      <MyPostsContainer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React, {ComponentType, useEffect } from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport { connect } from \"react-redux\";\r\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\r\nimport { RootStateType } from \"../../redux/reduxStore\";\r\nimport { compose } from \"redux\";\r\nimport { withAuthRedirect } from \"../hoc/authRedirect\";\r\nimport {\r\n  getStatus,\r\n  setProfileData,\r\n  setNewStatus,\r\n  setNewPhoto,\r\n  setUpdatedProfile\r\n} from \"../../redux/actions/myPosts\";\r\nimport { ProfileType } from \"../../redux/reducers/profile\";\r\nimport { ProfileDataType } from \"./editProfileForm\";\r\nimport { UploadFile } from \"antd/lib/upload/interface\";\r\n\r\ntype MapStateType = {\r\n  profile: ProfileType | null;\r\n  status: string,\r\n  authId: number | null\r\n};\r\ntype MapDispatchType = {\r\n  setProfileData: (id: string) => void;\r\n  getStatus: (status: string) => void;\r\n  setNewStatus: (status: string) => void;\r\n  setNewPhoto: (ava: UploadFile<any>) => void;\r\n  setUpdatedProfile: (data: ProfileDataType) => Promise<any>;\r\n};\r\ntype PathParamsType = {\r\n  userId: string\r\n}\r\ntype OwnPropsType = MapStateType & MapDispatchType\r\n\r\ntype ProfileAPIPropsType = RouteComponentProps<PathParamsType> & OwnPropsType\r\n\r\nconst ProfileAPI: React.FC<ProfileAPIPropsType> = ({\r\n  match,\r\n  history,\r\n  profile,\r\n  authId,\r\n  status,\r\n  setProfileData,\r\n  getStatus,\r\n  setNewStatus,\r\n  setNewPhoto,\r\n  setUpdatedProfile\r\n}) => {\r\n  let userId = match.params.userId;\r\n  useEffect(() => {\r\n    if (!userId) {\r\n      userId = String(authId);\r\n      if (!userId) {\r\n        history.push(\"/login\");\r\n      }\r\n    }\r\n    setProfileData(userId);\r\n    getStatus(userId);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!userId) {\r\n      userId = String(authId);\r\n      if (!userId) {\r\n        history.push(\"/login\");\r\n      }\r\n    }\r\n    setProfileData(userId);\r\n    getStatus(userId);\r\n  }, [userId]);\r\n\r\n  return (\r\n    <Profile\r\n      profile={profile}\r\n      status={status}\r\n      setNewStatus={setNewStatus}\r\n      isOwner={!userId}\r\n      setNewPhoto={setNewPhoto}\r\n      setUpdatedProfile={setUpdatedProfile}\r\n    />\r\n  );\r\n};\r\n\r\nlet mapStateToProps = (state: RootStateType): MapStateType => {\r\n  return {\r\n    profile: state.profile.profile,\r\n    status: state.profile.status,\r\n    authId: state.auth.id\r\n  };\r\n}\r\n\r\n\r\nconst ProfileContainer = compose<ComponentType>(\r\n  connect<MapStateType, any, {}, RootStateType>(mapStateToProps, {\r\n    setProfileData,\r\n    getStatus,\r\n    setNewStatus,\r\n    setNewPhoto,\r\n    setUpdatedProfile\r\n  }),\r\n  withRouter,\r\n  withAuthRedirect\r\n)(ProfileAPI);\r\nexport default ProfileContainer;\r\n","\r\nimport { FormAction, stopSubmit } from \"redux-form\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport { authMe,  loginMe, logoffMe, getCaptchaUrl } from \"../../api/api\";\r\nimport { dataType } from \"../reducers/auth\";\r\nimport { RootStateType } from \"../reduxStore\";\r\nimport { INITIALIZE_DATE, SET_CAPTCHA, SET_USER_DATA } from \"./types\";\r\n\r\nexport type setUserDataType = ReturnType<typeof setUserData>\r\nexport type StopSubmitType = ReturnType<typeof stopSubmit>\r\nexport type InitializeDataType = ReturnType<typeof initializeData>\r\nexport type SetCaptchaType = ReturnType<typeof setCaptcha>\r\n\r\nexport const setUserData = (data: dataType, isLogged: boolean) => { \r\n    return { type: SET_USER_DATA, data, isLogged } as const;\r\n}\r\nexport const initializeData = () => {\r\n  return{type: INITIALIZE_DATE} as const\r\n}\r\nexport const setCaptcha = (captcha: string) => {\r\ndebugger\r\n  return{ type: SET_CAPTCHA, captcha} as const\r\n}\r\n\r\nconst getUserData = (): ThunkAction<void, RootStateType, unknown, setUserDataType> => {\r\n  return (dispatch) => {\r\n        authMe().then((data) => {\r\n          if (data.resultCode === 0) {\r\n          dispatch(setUserData(data.data, true))\r\n          }\r\n        }).catch((e) => {\r\n      });\r\n  }\r\n}\r\nexport const initializeUserData = (): ThunkAction<void, RootStateType, unknown, InitializeDataType> => {\r\n  return (dispatch) => {\r\n    let promise = dispatch(getUserData())\r\n    Promise.all([promise]).then(() => {\r\n      dispatch(initializeData())\r\n    })\r\n  }\r\n}\r\nconst getCaptcha = (): ThunkAction<void, RootStateType, unknown, SetCaptchaType> => {\r\n  return (dispatch) => {\r\n   getCaptchaUrl().then((data) => {\r\n    dispatch(setCaptcha(data.url))\r\n    })\r\n  }\r\n}\r\n  \r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: null | string):ThunkAction<void, RootStateType, unknown, FormAction> => {\r\n  return (dispatch) => {\r\n    loginMe(email, password, rememberMe, captcha).then((data) => {\r\n          if (data.resultCode === 0) {\r\n            dispatch(getUserData())\r\n          } else {\r\n            if (data.resultCode === 10) {\r\n              dispatch(getCaptcha())\r\n            }\r\n            let errorMessage = data.messages.length > 0 ? data.messages[0] : 'Some error appeared'\r\n            dispatch(stopSubmit('login', { _error: errorMessage }))\r\n          }\r\n    }).catch((e) => {\r\n       \r\n      })\r\n  }\r\n}\r\n\r\nexport const logoff = ():ThunkAction<void, RootStateType, unknown, setUserDataType> => {\r\n  return (dispatch) => {\r\n        logoffMe().then((data) => {\r\n          if (data.resultCode === 0) {\r\n         dispatch(setUserData({  id: null, email: null, login: null}, false))\r\n        }\r\n      }).catch((e)=>{})\r\n  }\r\n}","import classes from './form.module.css';\r\nimport React from 'react'\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form'\r\nimport { required } from '../../utils/validators';\r\nimport { Input } from '../common/formControls';\r\n\r\nexport type LoginDataType = {\r\n  email: string\r\n  password: string\r\n  rememberMe: boolean\r\n  captcha: string | null\r\n}\r\nexport type LoginOwnPropsType = {\r\n  captcha: null| string\r\n}\r\nconst LoginF: React.FC<LoginOwnPropsType & InjectedFormProps<LoginDataType, LoginOwnPropsType>> = ({\r\n  captcha,\r\n  handleSubmit,\r\n  error,\r\n}) => {\r\n  return (\r\n    <>\r\n      <div style={{ fontSize: \"22px\" }}>\r\n        <p>Sorry but APP creation is still in progress</p>\r\n        <p>\r\n          To log in get registered&ensp;\r\n          <a\r\n            style={{ color: \"yellow\" }}\r\n            href={\"https://social-network.samuraijs.com/ \"}\r\n            target={\"_blank\"}\r\n          >\r\n            here\r\n          </a>\r\n        </p>\r\n        <p>or use common test account credentials:</p>\r\n        <p>Email: free@samuraijs.com</p>\r\n        <p>Password: free</p>\r\n      </div>\r\n      <form onSubmit={handleSubmit}>\r\n        <div>\r\n          <Field\r\n            placeholder=\"Email\"\r\n            validate={[required]}\r\n            component={Input}\r\n            name=\"email\"\r\n            type=\"email\"\r\n          />\r\n        </div>\r\n        <div>\r\n          <Field\r\n            placeholder=\"Password\"\r\n            validate={[required]}\r\n            component={Input}\r\n            name=\"password\"\r\n            type=\"password\"\r\n          />\r\n        </div>\r\n        {captcha && <img src={captcha} alt=\"captcha\" />}\r\n        {captcha && (\r\n          <Field\r\n            placeholder=\"type symbols from the photo\"\r\n            validate={[required]}\r\n            component={Input}\r\n            name='captcha'\r\n            type = 'text'\r\n          />\r\n        )}\r\n        <div>\r\n          <Field component=\"input\" type=\"checkbox\" name=\"rememberMe\" /> Remember\r\n          me\r\n        </div>\r\n        {error && <div className={classes.formError}>{error}</div>}\r\n        <div>\r\n          <button>Login</button>\r\n        </div>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\nconst LoginForm = reduxForm<LoginDataType, LoginOwnPropsType>({\r\n  form: \"login\",\r\n})(LoginF);\r\nexport default LoginForm","import React from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router';\r\nimport { login } from '../../redux/actions/auth';\r\nimport { RootStateType } from '../../redux/reduxStore';\r\nimport LoginForm, { LoginDataType } from './loginForm'\r\n\r\ntype MapDispatchType = {\r\n  login: (email: string, password: string, rememberMe: boolean, captcha: null | string) => void;\r\n};\r\ntype LoginMapStateType = {\r\n  isLogged: boolean\r\n  captcha: null | string\r\n}\r\n\r\n\r\nconst Login: React.FC<LoginMapStateType & MapDispatchType> = ({login,isLogged, captcha}) => {\r\n  const onSubmitData = (formData: LoginDataType) => {\r\n    login(formData.email, formData.password, formData.rememberMe, formData.captcha = null);\r\n  };\r\n\r\n  if (isLogged) {\r\n    return <Redirect to={'/profile'}/>\r\n }\r\n  return (\r\n    <>\r\n      <h2>Login</h2>\r\n      <LoginForm onSubmit={onSubmitData} captcha={captcha}/>\r\n    </>\r\n  )\r\n};\r\n\r\nconst mapStateToProps = (state: RootStateType): LoginMapStateType => {\r\n  return {\r\n    isLogged: state.auth.isLogged,\r\n    captcha: state.auth.captcha\r\n  };\r\n  \r\n}\r\nexport default connect<LoginMapStateType, MapDispatchType, {}, RootStateType>(mapStateToProps, {login})(Login)","import { PoweroffOutlined } from '@ant-design/icons';\r\nimport { Alert, Avatar, Button, Row } from 'antd';\r\nimport React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { logoff } from '../../redux/actions/auth';\r\nimport { authStateType } from '../../redux/reducers/auth';\r\nimport { RootStateType } from '../../redux/reduxStore';\r\nimport Preloader from '../Preloader/preloader';\r\n\r\nconst HeaderLogo = () => {\r\n  const dispatch = useDispatch()\r\n  const authDates = useSelector<RootStateType, authStateType>((state) => state.auth);\r\n  const {isLogged, isFetching} = authDates\r\n  const onLogout = () => { dispatch(logoff()); };\r\n  \r\n  let userAvatar = isLogged ? (\r\n    <>\r\n      <Avatar\r\n        src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\"\r\n        style={{ marginRight: \"30px\" }}\r\n      />\r\n      <Button\r\n        type=\"primary\"\r\n        danger\r\n        icon={<PoweroffOutlined />}\r\n        onClick={onLogout}\r\n      >\r\n        Logout\r\n      </Button>\r\n    </>\r\n  ) : (\r\n    <Alert message=\"You are not authorised\" type=\"warning\" />\r\n  );\r\n  let loginContent = isFetching ? <Preloader /> : userAvatar;\r\n  return (\r\n\r\n  <Row justify='end' align='middle' style={{height: \"100%\"}}>{loginContent}</Row>\r\n  );\r\n};\r\n\r\nexport default HeaderLogo;\r\n\r\n        ","\r\nimport { Menu } from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\n\r\n\r\nconst HeaderNavbar:React.FC<{location:string}> = ({location}) => {\r\nconst l = location === 'news' || location === 'music' || location === 'login' ? location : null\r\n  const [active, setActive] = useState<string| null>(null)\r\n  useEffect(() => {\r\n  setActive(l)\r\n}, [location])\r\n  \r\n  const list = [\r\n    { key: \"news\", label: \"News\", to: \"/news\", exact: false },\r\n    { key: \"music\", label: \"Music\", to: \"/music\", exact: false },\r\n    { key: \"login\", label: \"Login\", to: \"/login\", exact: false },\r\n  ];\r\n\r\n  const links = list.map(({ label, to, exact, key }, i) => {\r\n    return (\r\n      <Menu.Item key={key} onClick={() => setActive(key)}>\r\n        <NavLink to={to} exact={exact}>\r\n          {label}\r\n        </NavLink>\r\n      </Menu.Item>\r\n    );\r\n  });\r\n  return (\r\n    <Menu theme=\"dark\" mode=\"horizontal\" selectedKeys={[`${active}`]}>\r\n      {links}\r\n    </Menu>\r\n  );\r\n};\r\n\r\n\r\nexport default HeaderNavbar;\r\n","import { Col, Row } from 'antd'\r\nimport { Header } from 'antd/lib/layout/layout'\r\nimport React from 'react'\r\nimport HeaderLogo from './HeaderLogo'\r\nimport HeaderNavbar from './HeaderNavbarr'\r\n\r\nconst HeaderContent:React.FC<{location:string}> = ({location}) => {\r\n  return (\r\n    <Header className=\"header\" style={{padding: '0 24px'}}>\r\n      <Row>\r\n        <Col span={18}> <HeaderNavbar location={location}/></Col>\r\n        <Col span={6} ><HeaderLogo /></Col>\r\n      </Row>\r\n    </Header>\r\n  )\r\n}\r\nexport default HeaderContent","import { TeamOutlined, UserOutlined } from '@ant-design/icons';\r\nimport { Menu } from 'antd';\r\nimport SubMenu from 'antd/lib/menu/SubMenu';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst SidebarContent: React.FC<{ location: string }> = ({ location }) => {\r\n  let l = location === 'profile' || location === 'dialogs' || location === 'settings' ? location : null\r\n  \r\n  const [menuKey, setMenuKey] = useState<string | null>(null)\r\n  useEffect(() => {\r\n   setMenuKey(l)\r\n }, [location])\r\n  \r\n  const [sub, setSub] = useState<string>('sub1')\r\n  const profileMenuItems = [\r\n    { key: \"profile\", label: \"Profile\", to: \"/profile\", exact: false },\r\n    { key: \"dialogs\", label: \"Messages\", to: \"/dialogs\", exact: false },\r\n    { key: \"settings\", label: \"Settings\", to: \"/settings\", exact: false },\r\n  ].map((el) => {\r\n    return (\r\n      <Menu.Item key={el.key} onClick={() => setMenuKey(el.key)}>\r\n        <NavLink to={el.to} exact={el.exact}>\r\n          {el.label}\r\n        </NavLink>\r\n      </Menu.Item>\r\n    );\r\n  });\r\n  \r\n  return (\r\n      <Menu\r\n        mode=\"inline\"\r\n        selectedKeys={[`${menuKey}`]}\r\n        openKeys={[`${sub}`]}\r\n        style={{ height: \"100%\", borderRight: 0 }}\r\n      >\r\n        <SubMenu key=\"sub1\" icon={<UserOutlined />} title=\"My Profile\" onTitleClick={()=>setSub('sub1')}>\r\n          {profileMenuItems}\r\n        </SubMenu>\r\n        <SubMenu key=\"sub2\" icon={<TeamOutlined />} title=\"Users\" onTitleClick={()=>setSub('sub2')}>\r\n        <Menu.Item key=\"users\" onClick={() => setMenuKey('users')}>\r\n          <NavLink to ='./users'>Users</NavLink>\r\n          </Menu.Item>\r\n        </SubMenu>\r\n      </Menu>\r\n  );\r\n}\r\nexport default SidebarContent","import React, { ComponentType, Suspense, useEffect } from 'react';\nimport {Layout } from 'antd';\nimport './App.css';\nimport \"antd/dist/antd.css\";\nimport { Route, useLocation, withRouter } from 'react-router-dom'\nimport ProfileContainer from './components/Profile/ProfileContainer';\nimport Login from './components/Login/login';\nimport {  useDispatch, useSelector } from 'react-redux';\nimport { compose } from 'redux';\nimport { initializeUserData } from \"./redux/actions/auth\";\nimport { RootStateType } from './redux/reduxStore';\nimport Preloader from './components/Preloader/preloader';\nimport styles from './app.module.scss'\nimport HeaderContent from './components/HeaderContent/HeaderContent';\nimport SidebarContent from './components/SidebarContent/SidebarContent';\nconst UsersContainer = React.lazy(() => import('./components/Users/UsersContainer'))\nconst Dialogs = React.lazy(() => import(\"./components/Dialogs/Dialogs\"));\nconst News = React.lazy(() => import('./components/News'));\nconst Music = React.lazy(() => import('./components/Music/Music'));\nconst Settings = React.lazy(() => import('./components/Settings'));\nconst { Content, Sider } = Layout;\n\n\nconst App = ()=> {\n  const dispatch = useDispatch()\n  const isInit = useSelector<RootStateType, boolean>((state)=>state.auth.initialized)\n  useEffect(() => {\n  dispatch(initializeUserData());\n  }, [])\n  const loc = useLocation().pathname.slice(1)\n  if (!isInit) {\n    return<Preloader />\n  }\n    return (\n      <Layout className={styles.layout}>\n        <HeaderContent location={loc}/>\n        <Layout>\n          <Sider width={200} className=\"site-layout-background\">\n            <SidebarContent location={loc}/>\n          </Sider>\n          <Layout >\n            <Content\n              className=\"site-layout-background\"\n              style={{\n                padding: 24,\n                margin: 0,\n                minHeight: 280,\n              }}\n            >\n              <Route exact path=\"/\" render={() => <ProfileContainer />} />\n              <Suspense fallback={<div>Loading...</div>}>\n                <Route path=\"/dialogs\" render={() => <Dialogs />} />\n                <Route path=\"/news\" component={() => <News />} />\n                <Route path=\"/music\" component={() => <Music />} />\n                <Route path=\"/settings\" component={() => <Settings />} />\n                <Route path=\"/users\" render={() => <UsersContainer />} />\n              </Suspense>\n              <Route\n                path=\"/profile/:userId?\"\n                render={() => <ProfileContainer />}\n              />\n              <Route path=\"/login\" component={Login} />\n            </Content>\n          </Layout>\n        </Layout>\n      </Layout>\n    );\n  }\n\nconst AppContainer = compose<ComponentType>(\n  withRouter,\n)(App);\n\nexport default AppContainer;\n\n","\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport 'antd/dist/antd.css'\nimport store, { RootStateType } from \"./redux/reduxStore\";\nimport { Provider } from \"react-redux\";\nimport AppContainer from \"./App\";\nimport { HashRouter } from \"react-router-dom\";\n\nlet renderTree = (state:RootStateType) => {\n  ReactDOM.render(\n    <Provider store={store}>\n      <HashRouter>\n        <AppContainer />\n      </HashRouter>\n    </Provider>,\n    document.getElementById(\"root\")\n  );\n};\nrenderTree(store.getState());\nstore.subscribe(() => {\n  let state = store.getState();\n  renderTree(state);\n});","import classes from './formControls.module.css';\r\nimport React from 'react'\r\nimport { WrappedFieldProps } from 'redux-form/lib/Field';\r\n\r\n const FormControls: React.FC<WrappedFieldProps> = ({meta, ...restProps\r\n }) => {\r\n   let isError = meta.error && meta.touched ? classes.error : \"\";\r\n\r\n   return (\r\n     <div className={`${classes.textArreaWrapper} ${isError}`}>\r\n       {restProps.children}\r\n       {meta.error && meta.touched && <span>{meta.error}</span>}\r\n     </div>\r\n   );\r\n };\r\n\r\nexport const TextArea:React.FC<WrappedFieldProps>  = (props) => {\r\n  const { input, meta, ...restProps } = props\r\n  return (\r\n    <FormControls {...props}>\r\n      <textarea {...restProps} {...input} />\r\n    </FormControls>\r\n  );\r\n};\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n  const { input, meta, ...restProps } = props;\r\n  return (\r\n    <FormControls {...props}>\r\n      <input {...restProps} {...input} />\r\n    </FormControls>\r\n  );\r\n};\r\n\r\n","\r\nimport axios from 'axios'\r\nimport { ProfileDataType } from '../components/Profile/editProfileForm'\r\nimport { dataType } from '../redux/reducers/auth'\r\nimport { ProfileType } from '../redux/reducers/profile'\r\nimport { UsersType } from '../redux/reducers/users'\r\n\r\nlet instance = axios.create({\r\nbaseURL:`https://social-network.samuraijs.com/api/1.0/`,\r\n  withCredentials: true,\r\n  headers: {\r\n    \"API-KEY\": \"8a3288e4-c626-49c0-8a6e-b791c78489b1\",\r\n  },\r\n})\r\n\r\ntype CommonResponseType<D> = {\r\n  resultCode: number\r\n  messages: Array<string>\r\n  data: D\r\n}\r\n\r\ntype GetItemsResponseType = {\r\n  items: UsersType\r\n  totalCount: number\r\n  error: null | string\r\n}\r\n\r\n\r\n\r\nexport const getItems = (pageNumber: number) => {\r\n  return instance.get<GetItemsResponseType>(`users?page=${pageNumber}&count=5`).then(response => response.data)\r\n}\r\n  \r\nexport const followThisUser = (id: number) => {\r\n  return instance.post<CommonResponseType<{}>>(`follow/${id}`).then(response => response.data)\r\n}\r\nexport const noFollowThisUser = (id: number) => {\r\n  return instance.delete<CommonResponseType<{}>>(`follow/${id}`).then(response => response.data)\r\n}\r\nexport const getThisUser = (id: string) => {\r\n  return instance.get<ProfileType>(`profile/${id}`).then(response => response.data)\r\n}\r\nexport const authMe = () => {\r\n  return instance.get<CommonResponseType<dataType>>(`auth/me`).then(response => response.data)\r\n}\r\nexport const getThisStatus = (id: string) => {\r\n  return instance.get(`profile/status/${id}`).then(response => response.data)\r\n}\r\nexport const updateThisStatus = (status: string) => {\r\n  return instance.put<CommonResponseType<Object>>(`profile/status/`,{status}).then(response => response.data)\r\n}\r\nexport const loginMe = (email: string, password: string, rememberMe: boolean = false, captcha: null | string = null) => {\r\n  return instance.post<CommonResponseType<{userId:number}>>(`/auth/login/`,{email, password, rememberMe, captcha}).then(response => response.data)\r\n}\r\nexport const logoffMe = () => {\r\n  return instance.delete<CommonResponseType<{}>>(`/auth/login/`).then(response => response.data)\r\n}\r\nexport const updatePhoto = (ava: string | Blob) => {\r\n  const formData = new FormData()\r\n  formData.append('image', ava)\r\n    return instance.put(`profile/photo`, formData, {headers:{'Content-Type': 'multipart/form-data'}}).then((response)=>response.data)\r\n}\r\nexport const updateProfile = (profile: ProfileDataType) => {\r\n    return instance.put(`profile`, profile).then((response)=>response.data)\r\n}\r\nexport const getCaptchaUrl = () => {\r\n  \r\n  return instance.get<{ url: string }>(`/security/get-captcha-url/`).then((response)=>response.data)\r\n}","export const required = (value: string) => {\r\n  return value && value ? undefined : 'This field is required'\r\n}\r\n\r\nexport const maxLength = (max: number) => (value: string) => {\r\n  return value && value.length > max ? `Must be ${max} characters or less` : undefined\r\n}\r\n\r\n"],"sourceRoot":""}